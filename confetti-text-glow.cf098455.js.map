{"mappings":"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","sources":["node_modules/three/examples/jsm/postprocessing/EffectComposer.js","node_modules/three/examples/jsm/shaders/CopyShader.js","node_modules/three/examples/jsm/postprocessing/ShaderPass.js","node_modules/three/examples/jsm/postprocessing/Pass.js","node_modules/three/examples/jsm/postprocessing/MaskPass.js","node_modules/three/examples/jsm/postprocessing/RenderPass.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tClock,\n\tFloat32BufferAttribute,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from '../postprocessing/ShaderPass.js';\nimport { MaskPass } from '../postprocessing/MaskPass.js';\nimport { ClearMaskPass } from '../postprocessing/MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst parameters = {\n\t\t\t\tminFilter: LinearFilter,\n\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\tformat: RGBAFormat\n\t\t\t};\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t\t}\n\n\t\tif ( ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n}\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };\n","/**\n * Full-screen textured quad shader\n */\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import { Pass } from '../postprocessing/Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tColor\n} from 'three';\nimport { Pass } from '../postprocessing/Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n"],"names":["$ilwiq","parcelRequire","$1f89f80dfbd5e815$export$7fe01e6ab8aa748c","constructor","renderer","renderTarget","this","undefined","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","size","getSize","Vector2","_pixelRatio","getPixelRatio","_width","width","_height","height","WebGLRenderTarget","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","passes","$45fwF","CopyShader","console","error","$9ajTk","ShaderPass","copyPass","clock","Clock","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","$1jmvW","MaskPass","ClearMaskPass","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","OrthographicCamera","$1f89f80dfbd5e815$var$_geometry","BufferGeometry","setAttribute","Float32BufferAttribute","$2f93ac2d46312da9$export$57f84a24a9a6130d","uniforms","tDiffuse","value","opacity","vertexShader","fragmentShader","$6ac47a3de6300e1f$export$c55093fd4f9e42f0","$RPVlj","Pass","shader","textureID","super","ShaderMaterial","material","UniformsUtils","defines","Object","assign","fsQuad","FullScreenQuad","clear","autoClearColor","autoClearDepth","autoClearStencil","$0a1d3a5a6a49de03$export$802bc10488da99c7","$0a1d3a5a6a49de03$var$_camera","$0a1d3a5a6a49de03$var$_geometry","$0a1d3a5a6a49de03$export$3983474c8e6e978b","_mesh","Mesh","geometry","$0f4907a355572481$export$bb424a4005d6dde0","scene","camera","inverse","writeValue","clearValue","color","setMask","depth","setLocked","setTest","setOp","REPLACE","ALWAYS","setClear","KEEP","$0f4907a355572481$export$8d8650aed29c6251","$f4d3a60efece63cd$export$f63ea822f020b5b0","overrideMaterial","clearColor","clearAlpha","clearDepth","_oldClearColor","Color","oldAutoClear","autoClear","oldClearAlpha","oldOverrideMaterial","getClearColor","getClearAlpha","setClearColor"],"version":3,"file":"confetti-text-glow.cf098455.js.map"}