{"mappings":"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","sources":["node_modules/three/examples/jsm/postprocessing/EffectComposer.js","node_modules/three/examples/jsm/shaders/CopyShader.js","node_modules/three/examples/jsm/postprocessing/ShaderPass.js","node_modules/three/examples/jsm/postprocessing/Pass.js","node_modules/three/examples/jsm/postprocessing/MaskPass.js","node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js","node_modules/three/examples/jsm/shaders/LuminosityHighPassShader.js","node_modules/three/examples/jsm/postprocessing/RenderPass.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tClock,\n\tFloat32BufferAttribute,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from '../postprocessing/ShaderPass.js';\nimport { MaskPass } from '../postprocessing/MaskPass.js';\nimport { ClearMaskPass } from '../postprocessing/MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst parameters = {\n\t\t\t\tminFilter: LinearFilter,\n\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\tformat: RGBAFormat\n\t\t\t};\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t\t}\n\n\t\tif ( ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n}\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };\n","/**\n * Full-screen textured quad shader\n */\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import { Pass } from '../postprocessing/Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tAdditiveBlending,\n\tColor,\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { LuminosityHighPassShader } from '../shaders/LuminosityHighPassShader.js';\n\n/**\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * Reference:\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nclass UnrealBloomPass extends Pass {\n\n\tconstructor( resolution, strength, radius, threshold ) {\n\n\t\tsuper();\n\n\t\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\t\tthis.radius = radius;\n\t\tthis.threshold = threshold;\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t\t// create color only once here, reuse it later inside the render function\n\t\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t\t// render targets\n\t\tconst pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\t\tthis.renderTargetsHorizontal = [];\n\t\tthis.renderTargetsVertical = [];\n\t\tthis.nMips = 5;\n\t\tlet resx = Math.round( this.resolution.x / 2 );\n\t\tlet resy = Math.round( this.resolution.y / 2 );\n\n\t\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, pars );\n\t\tthis.renderTargetBright.texture.name = 'UnrealBloomPass.bright';\n\t\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tconst renderTargetHorizonal = new WebGLRenderTarget( resx, resy, pars );\n\n\t\t\trenderTargetHorizonal.texture.name = 'UnrealBloomPass.h' + i;\n\t\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\t\tconst renderTargetVertical = new WebGLRenderTarget( resx, resy, pars );\n\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// luminosity high pass material\n\n\t\tif ( LuminosityHighPassShader === undefined )\n\t\t\tconsole.error( 'THREE.UnrealBloomPass relies on LuminosityHighPassShader' );\n\n\t\tconst highPassShader = LuminosityHighPassShader;\n\t\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = threshold;\n\t\tthis.highPassUniforms[ 'smoothWidth' ].value = 0.01;\n\n\t\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\t\tuniforms: this.highPassUniforms,\n\t\t\tvertexShader: highPassShader.vertexShader,\n\t\t\tfragmentShader: highPassShader.fragmentShader,\n\t\t\tdefines: {}\n\t\t} );\n\n\t\t// Gaussian Blur Materials\n\t\tthis.separableBlurMaterials = [];\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\t\tresx = Math.round( this.resolution.x / 2 );\n\t\tresy = Math.round( this.resolution.y / 2 );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'texSize' ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// Composite material\n\t\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture1' ].value = this.renderTargetsVertical[ 0 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture2' ].value = this.renderTargetsVertical[ 1 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture3' ].value = this.renderTargetsVertical[ 2 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture4' ].value = this.renderTargetsVertical[ 3 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture5' ].value = this.renderTargetsVertical[ 4 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1;\n\t\tthis.compositeMaterial.needsUpdate = true;\n\n\t\tconst bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors;\n\t\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\t// copy material\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.UnrealBloomPass relies on CopyShader' );\n\n\t\t}\n\n\t\tconst copyShader = CopyShader;\n\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\t\tthis.copyUniforms[ 'opacity' ].value = 1.0;\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis._oldClearColor = new Color();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis.basic = new MeshBasicMaterial();\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tlet resx = Math.round( width / 2 );\n\t\tlet resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'texSize' ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tlet inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\tgetSeperableBlurMaterial( kernelRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_RADIUS': kernelRadius,\n\t\t\t\t'SIGMA': kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\tgetCompositeMaterial( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'NUM_MIPS': nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'blurTexture1': { value: null },\n\t\t\t\t'blurTexture2': { value: null },\n\t\t\t\t'blurTexture3': { value: null },\n\t\t\t\t'blurTexture4': { value: null },\n\t\t\t\t'blurTexture5': { value: null },\n\t\t\t\t'dirtTexture': { value: null },\n\t\t\t\t'bloomStrength': { value: 1.0 },\n\t\t\t\t'bloomFactors': { value: null },\n\t\t\t\t'bloomTintColors': { value: null },\n\t\t\t\t'bloomRadius': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform sampler2D dirtTexture;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n}\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n","import {\n\tColor\n} from 'three';\n\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nconst LuminosityHighPassShader = {\n\n\tshaderID: 'luminosityHighPass',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'luminosityThreshold': { value: 1.0 },\n\t\t'smoothWidth': { value: 1.0 },\n\t\t'defaultColor': { value: new Color( 0x000000 ) },\n\t\t'defaultOpacity': { value: 0.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec3 defaultColor;\n\t\tuniform float defaultOpacity;\n\t\tuniform float luminosityThreshold;\n\t\tuniform float smoothWidth;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n\t\t\tfloat v = dot( texel.xyz, luma );\n\n\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\n\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\n\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\n\n\t\t}`\n\n};\n\nexport { LuminosityHighPassShader };\n","import {\n\tColor\n} from 'three';\nimport { Pass } from '../postprocessing/Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n"],"names":["$eq1Fs","parcelRequire","$4a1fe32fc61d0987$export$7fe01e6ab8aa748c","swapBuffers","tmp","this","readBuffer","writeBuffer","addPass","pass","passes","push","setSize","_width","_pixelRatio","_height","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","undefined","clock","getDelta","currentRenderTarget","renderer","getRenderTarget","maskActive","il","renderToScreen","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","copyPass","EQUAL","$d6eQg","MaskPass","ClearMaskPass","setRenderTarget","reset","renderTarget","size","getSize","Vector2","getPixelRatio","width","height","renderTarget1","clone","dispose","renderTarget2","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","constructor","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","WebGLRenderTarget","texture","name","$7aiNI","CopyShader","console","error","$ho3l0","ShaderPass","Clock","OrthographicCamera","$4a1fe32fc61d0987$var$_geometry","BufferGeometry","setAttribute","Float32BufferAttribute","$53780d0517ea27d3$export$57f84a24a9a6130d","uniforms","tDiffuse","value","opacity","vertexShader","fragmentShader","$ca874461ec7efed8$export$c55093fd4f9e42f0","$bELaM","Pass","textureID","fsQuad","material","clear","autoClearColor","autoClearDepth","autoClearStencil","shader","super","ShaderMaterial","UniformsUtils","defines","Object","assign","FullScreenQuad","$87c805afa87cc906$export$802bc10488da99c7","$87c805afa87cc906$var$_camera","$87c805afa87cc906$var$_geometry","$87c805afa87cc906$export$3983474c8e6e978b","_mesh","geometry","Mesh","$98975938b42c4028$export$bb424a4005d6dde0","writeValue","clearValue","color","setMask","depth","setLocked","inverse","setTest","setOp","REPLACE","ALWAYS","setClear","scene","camera","KEEP","$98975938b42c4028$export$8d8650aed29c6251","$33f767415bfa9a5a$export$d4d608c865617544","renderTargetsHorizontal","i1","renderTargetsVertical","renderTargetBright","resx","Math","round","resy","nMips","separableBlurMaterials","getClearColor","_oldClearColor","oldClearAlpha","getClearAlpha","oldAutoClear","autoClear","setClearColor","clearColor","basic","map","highPassUniforms","threshold","materialHighPassFilter","inputRenderTarget","BlurDirectionX","BlurDirectionY","compositeMaterial","strength","radius","bloomTintColors","materialCopy","copyUniforms","getSeperableBlurMaterial","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","getCompositeMaterial","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomRadius","resolution","x","y","Color","pars","generateMipmaps","renderTargetHorizonal","renderTargetVertical","$fCvPM","LuminosityHighPassShader","highPassShader","kernelSizeArray","i2","needsUpdate","Vector3","copyShader","blending","AdditiveBlending","depthTest","depthWrite","transparent","MeshBasicMaterial","$b5f3193c0a9eb78d$export$30029d01c9072e8b","shaderID","luminosityThreshold","smoothWidth","defaultColor","defaultOpacity","$1c40b4e7d86f9408$export$f63ea822f020b5b0","oldOverrideMaterial","overrideMaterial","clearAlpha","clearDepth"],"version":3,"file":"hologram.7384f79a.js.map"}