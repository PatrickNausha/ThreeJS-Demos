{"mappings":"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","sources":["src/reflection-fun.js","node_modules/three/examples/jsm/postprocessing/FilmPass.js","node_modules/three/examples/jsm/shaders/FilmShader.js"],"sourcesContent":["import * as THREE from \"three\";\nimport * as Tone from \"tone\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Reflector } from \"./reflector\";\nimport { RectAreaLightHelper } from \"three/examples/jsm/helpers/RectAreaLightHelper\";\nimport { RectAreaLightUniformsLib } from \"three/examples/jsm/lights/RectAreaLightUniformsLib\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\";\nimport { FilmPass } from \"three/examples/jsm/postprocessing/FilmPass\";\nimport { MeshBasicMaterial } from \"three\";\n\nlet renderer, scene, bloomComposer, camera, finalComposer, groundMirror, rectLight1, rectLightHelper1;\n\nconst BLOOM_SCENE = 1;\nconst bloomLayer = new THREE.Layers();\nbloomLayer.set(BLOOM_SCENE);\n\ninit();\n\nfunction init() {\n\trenderer = new THREE.WebGLRenderer();\n\trenderer.setPixelRatio(window.devicePixelRatio);\n\trenderer.setSize(window.innerWidth, window.innerHeight);\n\trenderer.setAnimationLoop(animation);\n\tdocument.body.appendChild(renderer.domElement);\n\n\tconst textureLoader = new THREE.TextureLoader();\n\tconst concreteDiffuseMap = textureLoader.load(\"./assets/concrete/Concrete019_1K_Color.jpg\");\n\tconst concreteNormalMap = textureLoader.load(\"./assets/concrete/Concrete019_1K_NormalGL.jpg\");\n\tconcreteDiffuseMap.wrapS = concreteDiffuseMap.wrapT = THREE.RepeatWrapping;\n\tconcreteNormalMap.wrapS = concreteNormalMap.wrapT = THREE.RepeatWrapping;\n\tconcreteDiffuseMap.repeat.set(10, 10);\n\tconcreteNormalMap.repeat.set(10, 10);\n\n\tcamera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);\n\tcamera.position.set(0, 15, -25);\n\n\tscene = new THREE.Scene();\n\n\tRectAreaLightUniformsLib.init();\n\tconst lightWidth = 8;\n\tconst lightHeight = 50;\n\tconst lightColor = 0xff5500;\n\trectLight1 = new THREE.RectAreaLight(lightColor, 10, lightWidth, lightHeight);\n\tconst areaLightPlaneGeometry = new THREE.PlaneGeometry(lightWidth, lightHeight);\n\tconst areaLightPlane = new THREE.Mesh(\n\t\tareaLightPlaneGeometry,\n\t\tnew MeshBasicMaterial({\n\t\t\tcolor: lightColor,\n\t\t})\n\t);\n\tareaLightPlane.rotateX(Math.PI);\n\trectLight1.position.set(0, lightHeight / 2, 66.8);\n\tareaLightPlane.position.set(0, lightHeight / 2, 66.8);\n\tscene.add(rectLight1);\n\tscene.add(areaLightPlane);\n\n\tareaLightPlane.layers.enable(BLOOM_SCENE);\n\n\tconst geoFloor = new THREE.PlaneGeometry(100, 100);\n\tgroundMirror = new Reflector(geoFloor, {\n\t\tclipBias: 0.003,\n\t\ttextureWidth: window.innerWidth * window.devicePixelRatio,\n\t\ttextureHeight: window.innerHeight * window.devicePixelRatio,\n\t\tcolor: 0xffffff,\n\t\ttransparent: true,\n\t\topacity: 0.4,\n\t\tdepthFunc: THREE.EqualDepth, // Match ground depth exactly\n\t});\n\tgroundMirror.rotateX(-Math.PI / 2);\n\tgroundMirror.rotateZ(Math.PI / 4);\n\tscene.add(groundMirror);\n\n\tconst matStdFloor = new THREE.MeshStandardMaterial({\n\t\tcolor: 0xffffff,\n\t\troughness: 0.2,\n\t\tmetalness: 0,\n\t\tnormalMap: concreteNormalMap,\n\t\tmap: concreteDiffuseMap,\n\t});\n\tconst mshStdFloor = new THREE.Mesh(geoFloor, matStdFloor);\n\tmshStdFloor.rotateX(-Math.PI / 2);\n\tmshStdFloor.rotateZ(Math.PI / 4);\n\tscene.add(mshStdFloor);\n\n\tconst geoKnot = new THREE.TorusKnotGeometry(1.5, 0.5, 200, 16);\n\tconst matKnot = new THREE.MeshStandardMaterial({ color: 0xffffff, roughness: 0, metalness: 0 });\n\tconst meshKnot = new THREE.Mesh(geoKnot, matKnot);\n\tmeshKnot.name = \"meshKnot\";\n\tmeshKnot.position.set(0, 3, 24);\n\tscene.add(meshKnot);\n\n\tconst controls = new OrbitControls(camera, renderer.domElement);\n\tcontrols.target.set(0, 15, 100);\n\tcontrols.update();\n\n\twindow.addEventListener(\"resize\", onWindowResize);\n\n\t// Add render passes\n\tconst renderPass = new RenderPass(scene, camera);\n\tconst bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5, 0.4, 0.85);\n\tconst params = {\n\t\texposure: 1,\n\t\tbloomStrength: 1,\n\t\tbloomThreshold: 0,\n\t\tbloomRadius: 1,\n\t};\n\tbloomPass.threshold = params.bloomThreshold;\n\tbloomPass.strength = params.bloomStrength;\n\tbloomPass.radius = params.bloomRadius;\n\n\tbloomComposer = new EffectComposer(renderer);\n\tbloomComposer.renderToScreen = false;\n\tbloomComposer.addPass(renderPass); // We'll darken non-bloomy things\n\tbloomComposer.addPass(bloomPass);\n\n\tconst finalPass = new ShaderPass(\n\t\tnew THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\tbaseTexture: { value: null },\n\t\t\t\tbloomTexture: { value: bloomComposer.renderTarget2.texture },\n\t\t\t},\n\t\t\tvertexShader: `\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\t\t\tfragmentShader: `\n\t\t\t\tuniform sampler2D baseTexture;\n\t\t\t\tuniform sampler2D bloomTexture;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = ( texture2D( baseTexture, vUv ) + vec4( 1.0 ) * texture2D( bloomTexture, vUv ) );\n\t\t\t\t}`,\n\t\t\tdefines: {},\n\t\t}),\n\t\t\"baseTexture\"\n\t);\n\tfinalPass.needsSwap = true;\n\n\tfinalComposer = new EffectComposer(renderer);\n\tfinalComposer.addPass(renderPass);\n\tfinalComposer.addPass(finalPass);\n\tfinalComposer.addPass(new FilmPass(0.35, 0, 0, false));\n}\n\n// const dist = new Tone.PingPongDelay(\"8n\", 0.8).toDestination();\nconst synth = new Tone.PolySynth(Tone.Synth);\n// synth.connect(dist);\nsynth.toDestination();\n\n//create a synth and connect it to the main output (your speakers)\nlet resolveTonePromise;\nconst tonePromise = new Promise((resolve) => {\n\tresolveTonePromise = resolve;\n});\ndocument.body.addEventListener(\"click\", () => {\n\t// Tone.start().then(resolveTonePromise);\n});\n\nfunction onWindowResize() {\n\trenderer.setSize(window.innerWidth, window.innerHeight);\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n}\n\nfunction animation(time) {\n\tconst mesh = scene.getObjectByName(\"meshKnot\");\n\tmesh.rotation.y = time / 1000;\n\n\t// Render bloom-enabled things to bloom texture\n\trenderBloom();\n\n\tfinalComposer.render(0.01); // 0.01 is arbitrary for film pass\n}\n\nfunction renderBloom() {\n\tscene.traverse(darkenNonBloomed);\n\tgroundMirror.visible = false;\n\tbloomComposer.render();\n\tscene.traverse(restoreDarkenedMaterial);\n\tgroundMirror.visible = true;\n}\n\nconst darkMaterial = new THREE.MeshBasicMaterial({ color: \"black\" });\nconst materials = {};\nfunction darkenNonBloomed(obj) {\n\tif (obj.isMesh && bloomLayer.test(obj.layers) === false) {\n\t\tmaterials[obj.uuid] = obj.material;\n\t\tobj.material = darkMaterial;\n\t}\n}\n\nfunction restoreDarkenedMaterial(obj) {\n\tif (materials[obj.uuid]) {\n\t\tobj.material = materials[obj.uuid];\n\t\tdelete materials[obj.uuid];\n\t}\n}\n\ntonePromise.then(() => {\n\tsetInterval(() => {\n\t\trectLight1.visible = !rectLight1.visible;\n\t\trectLightHelper1.visible = !rectLightHelper1.visible;\n\n\t\tif (rectLight1.visible) {\n\t\t\tsynth.triggerAttack(\"C3\");\n\t\t} else {\n\t\t\tsynth.triggerRelease(\"C3\");\n\t\t}\n\t}, 1000);\n\n\tsetInterval(() => {\n\t\trectLight2.visible = !rectLight2.visible;\n\t\trectLightHelper2.visible = !rectLightHelper2.visible;\n\n\t\tif (rectLight2.visible) {\n\t\t\tsynth.triggerAttack(\"E3\");\n\t\t} else {\n\t\t\tsynth.triggerRelease(\"E3\");\n\t\t}\n\t}, 500);\n\n\tsetInterval(() => {\n\t\trectLight3.visible = !rectLight3.visible;\n\t\trectLightHelper3.visible = !rectLightHelper3.visible;\n\n\t\tif (rectLight3.visible) {\n\t\t\tsynth.triggerAttack(\"G3\");\n\t\t} else {\n\t\t\tsynth.triggerRelease(\"G3\");\n\t\t}\n\t}, 1250);\n});\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass.js';\nimport { FilmShader } from '../shaders/FilmShader.js';\n\nclass FilmPass extends Pass {\n\n\tconstructor( noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale ) {\n\n\t\tsuper();\n\n\t\tif ( FilmShader === undefined ) console.error( 'THREE.FilmPass relies on FilmShader' );\n\n\t\tconst shader = FilmShader;\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tif ( grayscale !== undefined )\tthis.uniforms.grayscale.value = grayscale;\n\t\tif ( noiseIntensity !== undefined ) this.uniforms.nIntensity.value = noiseIntensity;\n\t\tif ( scanlinesIntensity !== undefined ) this.uniforms.sIntensity.value = scanlinesIntensity;\n\t\tif ( scanlinesCount !== undefined ) this.uniforms.sCount.value = scanlinesCount;\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime /*, maskActive */ ) {\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'time' ].value += deltaTime;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { FilmPass };\n","/**\n * Film grain & scanlines shader\n *\n * - ported from HLSL to WebGL / GLSL\n * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\n *\n * Screen Space Static Postprocessor\n *\n * Produces an analogue noise overlay similar to a film grain / TV static\n *\n * Original implementation and noise algorithm\n * Pat 'Hawthorne' Shearon\n *\n * Optimized scanlines + noise version with intensity scaling\n * Georg 'Leviathan' Steinrohder\n *\n * This version is provided under a Creative Commons Attribution 3.0 License\n * http://creativecommons.org/licenses/by/3.0/\n */\n\nconst FilmShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'time': { value: 0.0 },\n\t\t'nIntensity': { value: 0.5 },\n\t\t'sIntensity': { value: 0.05 },\n\t\t'sCount': { value: 4096 },\n\t\t'grayscale': { value: 1 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\t#include <common>\n\n\t\t// control parameter\n\t\tuniform float time;\n\n\t\tuniform bool grayscale;\n\n\t\t// noise effect intensity value (0 = no effect, 1 = full effect)\n\t\tuniform float nIntensity;\n\n\t\t// scanlines effect intensity value (0 = no effect, 1 = full effect)\n\t\tuniform float sIntensity;\n\n\t\t// scanlines effect count value (0 = no effect, 4096 = full effect)\n\t\tuniform float sCount;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t// sample the source\n\t\t\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\n\n\t\t// make some noise\n\t\t\tfloat dx = rand( vUv + time );\n\n\t\t// add noise\n\t\t\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\n\n\t\t// get us a sine and cosine\n\t\t\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\n\n\t\t// add scanlines\n\t\t\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\n\n\t\t// interpolate between source and result by intensity\n\t\t\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\n\n\t\t// convert to grayscale if desired\n\t\t\tif( grayscale ) {\n\n\t\t\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\n\n\t\t\t}\n\n\t\t\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\n\n\t\t}`,\n\n};\n\nexport { FilmShader };\n"],"names":["$ilwiq","parcelRequire","$7fead086545b0383$export$7bd85fbe73ca4d63","uniforms","tDiffuse","value","time","nIntensity","sIntensity","sCount","grayscale","vertexShader","fragmentShader","$45b7857646e6d65b$export$1576e422a3dcc2a","$RPVlj","Pass","constructor","noiseIntensity","scanlinesIntensity","scanlinesCount","super","undefined","console","error","shader","this","UniformsUtils","clone","material","ShaderMaterial","fsQuad","FullScreenQuad","render","renderer","writeBuffer","readBuffer","deltaTime","texture","renderToScreen","setRenderTarget","clear","$b25e1fb8c6a69c68$var$renderer","$b25e1fb8c6a69c68$var$scene","$b25e1fb8c6a69c68$var$bloomComposer","$b25e1fb8c6a69c68$var$camera","$b25e1fb8c6a69c68$var$finalComposer","$b25e1fb8c6a69c68$var$groundMirror","$b25e1fb8c6a69c68$var$rectLight1","$b25e1fb8c6a69c68$var$bloomLayer","Layers","set","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","setAnimationLoop","$b25e1fb8c6a69c68$var$animation","document","body","appendChild","domElement","textureLoader","TextureLoader","concreteDiffuseMap","load","concreteNormalMap","wrapS","wrapT","RepeatWrapping","repeat","PerspectiveCamera","position","Scene","$lhJUT","RectAreaLightUniformsLib","init","lightColor","RectAreaLight","areaLightPlaneGeometry","PlaneGeometry","areaLightPlane","Mesh","MeshBasicMaterial","color","rotateX","Math","PI","lightHeight","add","layers","enable","geoFloor","$1kdUw","Reflector","clipBias","textureWidth","textureHeight","transparent","opacity","depthFunc","EqualDepth","rotateZ","matStdFloor","MeshStandardMaterial","roughness","metalness","normalMap","map","mshStdFloor","geoKnot","TorusKnotGeometry","matKnot","meshKnot","name","controls","$5Rd1x","OrbitControls","target","update","addEventListener","$b25e1fb8c6a69c68$var$onWindowResize","renderPass","$l1cPW","RenderPass","bloomPass","$hlgjA","UnrealBloomPass","Vector2","params","exposure","bloomStrength","bloomThreshold","bloomRadius","threshold","strength","radius","$2HSCJ","EffectComposer","addPass","finalPass","$9ajTk","ShaderPass","baseTexture","bloomTexture","renderTarget2","defines","needsSwap","$b25e1fb8c6a69c68$var$init","$b25e1fb8c6a69c68$var$synth","$jzIcS","PolySynth","Synth","$b25e1fb8c6a69c68$var$resolveTonePromise","toDestination","$b25e1fb8c6a69c68$var$tonePromise","Promise","resolve","aspect","updateProjectionMatrix","getObjectByName","rotation","y","traverse","$b25e1fb8c6a69c68$var$darkenNonBloomed","visible","$b25e1fb8c6a69c68$var$restoreDarkenedMaterial","$b25e1fb8c6a69c68$var$darkMaterial","$b25e1fb8c6a69c68$var$materials","obj","isMesh","test","uuid","then","setInterval","$b25e1fb8c6a69c68$var$rectLightHelper1","triggerAttack","triggerRelease","rectLight2","rectLightHelper2","rectLight3","rectLightHelper3"],"version":3,"file":"reflection-fun.c1765a44.js.map"}