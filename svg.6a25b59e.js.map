{"mappings":"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","sources":["src/svg-demo.js","node_modules/three/examples/jsm/loaders/SVGLoader.js","src/debug-stats.js","node_modules/stats-js/build/stats.min.js"],"sourcesContent":["import {\n\tScene,\n\tPerspectiveCamera,\n\tWebGLRenderer,\n\tMeshStandardMaterial,\n\tHemisphereLight,\n\tMesh,\n\tGroup,\n\tMeshBasicMaterial,\n\tShapeBufferGeometry,\n\tExtrudeGeometry,\n\tBackSide,\n} from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { SVGLoader } from \"three/examples/jsm/loaders/SVGLoader\";\nimport { updateStats, toggleStats } from \"./debug-stats\";\n\nconst renderer = new WebGLRenderer({ antialias: true, alpha: true });\nrenderer.setClearColor(0x000000, 0);\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// In the beginning ...\nconst scene = new Scene();\n\n// Camera\nconst camera = new PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);\ncamera.position.z = -160;\nnew OrbitControls(camera, renderer.domElement);\n\nconst loader = new SVGLoader();\nloader.load(\n\t\"./assets/shine-like-stars-outlined-3.svg\",\n\tfunction ({ paths }) {\n\t\tconst group = new Group();\n\t\tfor (const path of paths) {\n\t\t\tconst extrudeMaterial = new MeshStandardMaterial({\n\t\t\t\tcolor: path.color,\n\t\t\t});\n\n\t\t\tconst frontGlowMaterial = new MeshBasicMaterial({\n\t\t\t\tcolor: path.color,\n\t\t\t\tside: BackSide, // Not sure why it comes out backward by default, but it does.\n\t\t\t\tdepthTest: false, // Hack: Since we're rendering the ShapeBufferGeometry directly on top of the ExtrudeGeometry, always render on top.\n\t\t\t});\n\n\t\t\tconst shapes = path.toShapes(true);\n\n\t\t\tconst { fill } = path.userData.style;\n\t\t\tif (fill && fill !== \"none\") {\n\t\t\t\tfor (const shape of shapes) {\n\t\t\t\t\tconst extrudeGeometry = new ExtrudeGeometry(shape, {\n\t\t\t\t\t\tdepth: 4,\n\t\t\t\t\t\tbevelEnabled: false,\n\t\t\t\t\t});\n\t\t\t\t\tconst extrudeMesh = new Mesh(extrudeGeometry, extrudeMaterial);\n\t\t\t\t\tgroup.add(extrudeMesh);\n\n\t\t\t\t\tconst geometry = new ShapeBufferGeometry(shape);\n\t\t\t\t\tconst mesh = new Mesh(geometry, frontGlowMaterial);\n\t\t\t\t\tgroup.add(mesh);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tgroup.rotateZ(Math.PI); // Not sure why SVG comes out flipped around.\n\t\tgroup.position.x = 200;\n\t\tgroup.position.y = 160;\n\t\tscene.add(group);\n\t},\n\tfunction (xhr) {\n\t\t// called when loading is in progresses\n\t},\n\tfunction (error) {\n\t\tconsole.error(error);\n\t}\n);\n\nconst light = new HemisphereLight(0xaaaaff, 0xffaaaa, 1);\nscene.add(light);\n\n// Show stats\ntoggleStats();\n\n// Main loop\nfunction animate() {\n\trequestAnimationFrame(animate);\n\trenderer.render(scene, camera);\n\tupdateStats();\n}\nanimate();\n","import {\n\tBox2,\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader,\n\tMatrix3,\n\tPath,\n\tShape,\n\tShapePath,\n\tShapeUtils,\n\tVector2,\n\tVector3\n} from 'three';\n\nclass SVGLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t// Default dots per inch\n\t\tthis.defaultDPI = 90;\n\n\t\t// Accepted units: 'mm', 'cm', 'in', 'pt', 'pc', 'px'\n\t\tthis.defaultUnit = 'px';\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( text ) {\n\n\t\tconst scope = this;\n\n\t\tfunction parseNode( node, style ) {\n\n\t\t\tif ( node.nodeType !== 1 ) return;\n\n\t\t\tconst transform = getNodeTransform( node );\n\n\t\t\tlet traverseChildNodes = true;\n\n\t\t\tlet path = null;\n\n\t\t\tswitch ( node.nodeName ) {\n\n\t\t\t\tcase 'svg':\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'style':\n\t\t\t\t\tparseCSSStylesheet( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'g':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'path':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tif ( node.hasAttribute( 'd' ) ) path = parsePathNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'rect':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tpath = parseRectNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'polygon':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tpath = parsePolygonNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'polyline':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tpath = parsePolylineNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'circle':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tpath = parseCircleNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ellipse':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tpath = parseEllipseNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'line':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tpath = parseLineNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'defs':\n\t\t\t\t\ttraverseChildNodes = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'use':\n\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\tconst usedNodeId = node.href.baseVal.substring( 1 );\n\t\t\t\t\tconst usedNode = node.viewportElement.getElementById( usedNodeId );\n\t\t\t\t\tif ( usedNode ) {\n\n\t\t\t\t\t\tparseNode( usedNode, style );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'SVGLoader: \\'use node\\' references non-existent node id: ' + usedNodeId );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// console.log( node );\n\n\t\t\t}\n\n\t\t\tif ( path ) {\n\n\t\t\t\tif ( style.fill !== undefined && style.fill !== 'none' ) {\n\n\t\t\t\t\tpath.color.setStyle( style.fill );\n\n\t\t\t\t}\n\n\t\t\t\ttransformPath( path, currentTransform );\n\n\t\t\t\tpaths.push( path );\n\n\t\t\t\tpath.userData = { node: node, style: style };\n\n\t\t\t}\n\n\t\t\tif ( traverseChildNodes ) {\n\n\t\t\t\tconst nodes = node.childNodes;\n\n\t\t\t\tfor ( let i = 0; i < nodes.length; i ++ ) {\n\n\t\t\t\t\tparseNode( nodes[ i ], style );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( transform ) {\n\n\t\t\t\ttransformStack.pop();\n\n\t\t\t\tif ( transformStack.length > 0 ) {\n\n\t\t\t\t\tcurrentTransform.copy( transformStack[ transformStack.length - 1 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentTransform.identity();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parsePathNode( node ) {\n\n\t\t\tconst path = new ShapePath();\n\n\t\t\tconst point = new Vector2();\n\t\t\tconst control = new Vector2();\n\n\t\t\tconst firstPoint = new Vector2();\n\t\t\tlet isFirstPoint = true;\n\t\t\tlet doSetFirstPoint = false;\n\n\t\t\tconst d = node.getAttribute( 'd' );\n\n\t\t\t// console.log( d );\n\n\t\t\tconst commands = d.match( /[a-df-z][^a-df-z]*/ig );\n\n\t\t\tfor ( let i = 0, l = commands.length; i < l; i ++ ) {\n\n\t\t\t\tconst command = commands[ i ];\n\n\t\t\t\tconst type = command.charAt( 0 );\n\t\t\t\tconst data = command.substr( 1 ).trim();\n\n\t\t\t\tif ( isFirstPoint === true ) {\n\n\t\t\t\t\tdoSetFirstPoint = true;\n\t\t\t\t\tisFirstPoint = false;\n\n\t\t\t\t}\n\n\t\t\t\tlet numbers;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'M':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 1 ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\n\t\t\t\t\t\t\tif ( j === 0 ) {\n\n\t\t\t\t\t\t\t\tpath.moveTo( point.x, point.y );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'H':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tpoint.x = numbers[ j ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tpoint.y = numbers[ j ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'L':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 1 ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'C':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 6 ) {\n\n\t\t\t\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\t\t\t\tnumbers[ j + 0 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 1 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 2 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 3 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 4 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 5 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = numbers[ j + 2 ];\n\t\t\t\t\t\t\tcontrol.y = numbers[ j + 3 ];\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 4 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 5 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'S':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 4 ) {\n\n\t\t\t\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\t\t\t\tgetReflection( point.x, control.x ),\n\t\t\t\t\t\t\t\tgetReflection( point.y, control.y ),\n\t\t\t\t\t\t\t\tnumbers[ j + 0 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 1 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 2 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 3 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\tcontrol.y = numbers[ j + 1 ];\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 2 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 3 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Q':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 4 ) {\n\n\t\t\t\t\t\t\tpath.quadraticCurveTo(\n\t\t\t\t\t\t\t\tnumbers[ j + 0 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 1 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 2 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 3 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\tcontrol.y = numbers[ j + 1 ];\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 2 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 3 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\tconst rx = getReflection( point.x, control.x );\n\t\t\t\t\t\t\tconst ry = getReflection( point.y, control.y );\n\t\t\t\t\t\t\tpath.quadraticCurveTo(\n\t\t\t\t\t\t\t\trx,\n\t\t\t\t\t\t\t\try,\n\t\t\t\t\t\t\t\tnumbers[ j + 0 ],\n\t\t\t\t\t\t\t\tnumbers[ j + 1 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = rx;\n\t\t\t\t\t\t\tcontrol.y = ry;\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 1 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'A':\n\t\t\t\t\t\tnumbers = parseFloats( data, [ 3, 4 ], 7 );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 7 ) {\n\n\t\t\t\t\t\t\t// skip command if start point == end point\n\t\t\t\t\t\t\tif ( numbers[ j + 5 ] == point.x && numbers[ j + 6 ] == point.y ) continue;\n\n\t\t\t\t\t\t\tconst start = point.clone();\n\t\t\t\t\t\t\tpoint.x = numbers[ j + 5 ];\n\t\t\t\t\t\t\tpoint.y = numbers[ j + 6 ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tparseArcCommand(\n\t\t\t\t\t\t\t\tpath, numbers[ j ], numbers[ j + 1 ], numbers[ j + 2 ], numbers[ j + 3 ], numbers[ j + 4 ], start, point\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\tpoint.x += numbers[ j + 0 ];\n\t\t\t\t\t\t\tpoint.y += numbers[ j + 1 ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\n\t\t\t\t\t\t\tif ( j === 0 ) {\n\n\t\t\t\t\t\t\t\tpath.moveTo( point.x, point.y );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'h':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tpoint.x += numbers[ j ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tpoint.y += numbers[ j ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\tpoint.x += numbers[ j + 0 ];\n\t\t\t\t\t\t\tpoint.y += numbers[ j + 1 ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 6 ) {\n\n\t\t\t\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 0 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 1 ],\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 2 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 3 ],\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 4 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 5 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = point.x + numbers[ j + 2 ];\n\t\t\t\t\t\t\tcontrol.y = point.y + numbers[ j + 3 ];\n\t\t\t\t\t\t\tpoint.x += numbers[ j + 4 ];\n\t\t\t\t\t\t\tpoint.y += numbers[ j + 5 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 's':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 4 ) {\n\n\t\t\t\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\t\t\t\tgetReflection( point.x, control.x ),\n\t\t\t\t\t\t\t\tgetReflection( point.y, control.y ),\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 0 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 1 ],\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 2 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 3 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = point.x + numbers[ j + 0 ];\n\t\t\t\t\t\t\tcontrol.y = point.y + numbers[ j + 1 ];\n\t\t\t\t\t\t\tpoint.x += numbers[ j + 2 ];\n\t\t\t\t\t\t\tpoint.y += numbers[ j + 3 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 4 ) {\n\n\t\t\t\t\t\t\tpath.quadraticCurveTo(\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 0 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 1 ],\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 2 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 3 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = point.x + numbers[ j + 0 ];\n\t\t\t\t\t\t\tcontrol.y = point.y + numbers[ j + 1 ];\n\t\t\t\t\t\t\tpoint.x += numbers[ j + 2 ];\n\t\t\t\t\t\t\tpoint.y += numbers[ j + 3 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tnumbers = parseFloats( data );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\tconst rx = getReflection( point.x, control.x );\n\t\t\t\t\t\t\tconst ry = getReflection( point.y, control.y );\n\t\t\t\t\t\t\tpath.quadraticCurveTo(\n\t\t\t\t\t\t\t\trx,\n\t\t\t\t\t\t\t\try,\n\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 0 ],\n\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 1 ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontrol.x = rx;\n\t\t\t\t\t\t\tcontrol.y = ry;\n\t\t\t\t\t\t\tpoint.x = point.x + numbers[ j + 0 ];\n\t\t\t\t\t\t\tpoint.y = point.y + numbers[ j + 1 ];\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'a':\n\t\t\t\t\t\tnumbers = parseFloats( data, [ 3, 4 ], 7 );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = numbers.length; j < jl; j += 7 ) {\n\n\t\t\t\t\t\t\t// skip command if no displacement\n\t\t\t\t\t\t\tif ( numbers[ j + 5 ] == 0 && numbers[ j + 6 ] == 0 ) continue;\n\n\t\t\t\t\t\t\tconst start = point.clone();\n\t\t\t\t\t\t\tpoint.x += numbers[ j + 5 ];\n\t\t\t\t\t\t\tpoint.y += numbers[ j + 6 ];\n\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\tparseArcCommand(\n\t\t\t\t\t\t\t\tpath, numbers[ j ], numbers[ j + 1 ], numbers[ j + 2 ], numbers[ j + 3 ], numbers[ j + 4 ], start, point\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Z':\n\t\t\t\t\tcase 'z':\n\t\t\t\t\t\tpath.currentPath.autoClose = true;\n\n\t\t\t\t\t\tif ( path.currentPath.curves.length > 0 ) {\n\n\t\t\t\t\t\t\t// Reset point to beginning of Path\n\t\t\t\t\t\t\tpoint.copy( firstPoint );\n\t\t\t\t\t\t\tpath.currentPath.currentPoint.copy( point );\n\t\t\t\t\t\t\tisFirstPoint = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( command );\n\n\t\t\t\t}\n\n\t\t\t\t// console.log( type, parseFloats( data ), parseFloats( data ).length  )\n\n\t\t\t\tdoSetFirstPoint = false;\n\n\t\t\t}\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\tfunction parseCSSStylesheet( node ) {\n\n\t\t\tif ( ! node.sheet || ! node.sheet.cssRules || ! node.sheet.cssRules.length ) return;\n\n\t\t\tfor ( let i = 0; i < node.sheet.cssRules.length; i ++ ) {\n\n\t\t\t\tconst stylesheet = node.sheet.cssRules[ i ];\n\n\t\t\t\tif ( stylesheet.type !== 1 ) continue;\n\n\t\t\t\tconst selectorList = stylesheet.selectorText\n\t\t\t\t\t.split( /,/gm )\n\t\t\t\t\t.filter( Boolean )\n\t\t\t\t\t.map( i => i.trim() );\n\n\t\t\t\tfor ( let j = 0; j < selectorList.length; j ++ ) {\n\n\t\t\t\t\tstylesheets[ selectorList[ j ] ] = Object.assign(\n\t\t\t\t\t\tstylesheets[ selectorList[ j ] ] || {},\n\t\t\t\t\t\tstylesheet.style\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n\t\t * https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/ Appendix: Endpoint to center arc conversion\n\t\t * From\n\t\t * rx ry x-axis-rotation large-arc-flag sweep-flag x y\n\t\t * To\n\t\t * aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation\n\t\t */\n\n\t\tfunction parseArcCommand( path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end ) {\n\n\t\t\tif ( rx == 0 || ry == 0 ) {\n\n\t\t\t\t// draw a line if either of the radii == 0\n\t\t\t\tpath.lineTo( end.x, end.y );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tx_axis_rotation = x_axis_rotation * Math.PI / 180;\n\n\t\t\t// Ensure radii are positive\n\t\t\trx = Math.abs( rx );\n\t\t\try = Math.abs( ry );\n\n\t\t\t// Compute (x1', y1')\n\t\t\tconst dx2 = ( start.x - end.x ) / 2.0;\n\t\t\tconst dy2 = ( start.y - end.y ) / 2.0;\n\t\t\tconst x1p = Math.cos( x_axis_rotation ) * dx2 + Math.sin( x_axis_rotation ) * dy2;\n\t\t\tconst y1p = - Math.sin( x_axis_rotation ) * dx2 + Math.cos( x_axis_rotation ) * dy2;\n\n\t\t\t// Compute (cx', cy')\n\t\t\tlet rxs = rx * rx;\n\t\t\tlet rys = ry * ry;\n\t\t\tconst x1ps = x1p * x1p;\n\t\t\tconst y1ps = y1p * y1p;\n\n\t\t\t// Ensure radii are large enough\n\t\t\tconst cr = x1ps / rxs + y1ps / rys;\n\n\t\t\tif ( cr > 1 ) {\n\n\t\t\t\t// scale up rx,ry equally so cr == 1\n\t\t\t\tconst s = Math.sqrt( cr );\n\t\t\t\trx = s * rx;\n\t\t\t\try = s * ry;\n\t\t\t\trxs = rx * rx;\n\t\t\t\trys = ry * ry;\n\n\t\t\t}\n\n\t\t\tconst dq = ( rxs * y1ps + rys * x1ps );\n\t\t\tconst pq = ( rxs * rys - dq ) / dq;\n\t\t\tlet q = Math.sqrt( Math.max( 0, pq ) );\n\t\t\tif ( large_arc_flag === sweep_flag ) q = - q;\n\t\t\tconst cxp = q * rx * y1p / ry;\n\t\t\tconst cyp = - q * ry * x1p / rx;\n\n\t\t\t// Step 3: Compute (cx, cy) from (cx', cy')\n\t\t\tconst cx = Math.cos( x_axis_rotation ) * cxp - Math.sin( x_axis_rotation ) * cyp + ( start.x + end.x ) / 2;\n\t\t\tconst cy = Math.sin( x_axis_rotation ) * cxp + Math.cos( x_axis_rotation ) * cyp + ( start.y + end.y ) / 2;\n\n\t\t\t// Step 4: Compute θ1 and Δθ\n\t\t\tconst theta = svgAngle( 1, 0, ( x1p - cxp ) / rx, ( y1p - cyp ) / ry );\n\t\t\tconst delta = svgAngle( ( x1p - cxp ) / rx, ( y1p - cyp ) / ry, ( - x1p - cxp ) / rx, ( - y1p - cyp ) / ry ) % ( Math.PI * 2 );\n\n\t\t\tpath.currentPath.absellipse( cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation );\n\n\t\t}\n\n\t\tfunction svgAngle( ux, uy, vx, vy ) {\n\n\t\t\tconst dot = ux * vx + uy * vy;\n\t\t\tconst len = Math.sqrt( ux * ux + uy * uy ) * Math.sqrt( vx * vx + vy * vy );\n\t\t\tlet ang = Math.acos( Math.max( - 1, Math.min( 1, dot / len ) ) ); // floating point precision, slightly over values appear\n\t\t\tif ( ( ux * vy - uy * vx ) < 0 ) ang = - ang;\n\t\t\treturn ang;\n\n\t\t}\n\n\t\t/*\n\t\t* According to https://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute\n\t\t* rounded corner should be rendered to elliptical arc, but bezier curve does the job well enough\n\t\t*/\n\t\tfunction parseRectNode( node ) {\n\n\t\t\tconst x = parseFloatWithUnits( node.getAttribute( 'x' ) || 0 );\n\t\t\tconst y = parseFloatWithUnits( node.getAttribute( 'y' ) || 0 );\n\t\t\tconst rx = parseFloatWithUnits( node.getAttribute( 'rx' ) || node.getAttribute( 'ry' ) || 0 );\n\t\t\tconst ry = parseFloatWithUnits( node.getAttribute( 'ry' ) || node.getAttribute( 'rx' ) || 0 );\n\t\t\tconst w = parseFloatWithUnits( node.getAttribute( 'width' ) );\n\t\t\tconst h = parseFloatWithUnits( node.getAttribute( 'height' ) );\n\n\t\t\t// Ellipse arc to Bezier approximation Coefficient (Inversed). See:\n\t\t\t// https://spencermortensen.com/articles/bezier-circle/\n\t\t\tconst bci = 1 - 0.551915024494;\n\n\t\t\tconst path = new ShapePath();\n\n\t\t\t// top left\n\t\t\tpath.moveTo( x + rx, y );\n\n\t\t\t// top right\n\t\t\tpath.lineTo( x + w - rx, y );\n\t\t\tif ( rx !== 0 || ry !== 0 ) {\n\n\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\tx + w - rx * bci,\n\t\t\t\t\ty,\n\t\t\t\t\tx + w,\n\t\t\t\t\ty + ry * bci,\n\t\t\t\t\tx + w,\n\t\t\t\t\ty + ry\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t// bottom right\n\t\t\tpath.lineTo( x + w, y + h - ry );\n\t\t\tif ( rx !== 0 || ry !== 0 ) {\n\n\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\tx + w,\n\t\t\t\t\ty + h - ry * bci,\n\t\t\t\t\tx + w - rx * bci,\n\t\t\t\t\ty + h,\n\t\t\t\t\tx + w - rx,\n\t\t\t\t\ty + h\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t// bottom left\n\t\t\tpath.lineTo( x + rx, y + h );\n\t\t\tif ( rx !== 0 || ry !== 0 ) {\n\n\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\tx + rx * bci,\n\t\t\t\t\ty + h,\n\t\t\t\t\tx,\n\t\t\t\t\ty + h - ry * bci,\n\t\t\t\t\tx,\n\t\t\t\t\ty + h - ry\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t// back to top left\n\t\t\tpath.lineTo( x, y + ry );\n\t\t\tif ( rx !== 0 || ry !== 0 ) {\n\n\t\t\t\tpath.bezierCurveTo( x, y + ry * bci, x + rx * bci, y, x + rx, y );\n\n\t\t\t}\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\tfunction parsePolygonNode( node ) {\n\n\t\t\tfunction iterator( match, a, b ) {\n\n\t\t\t\tconst x = parseFloatWithUnits( a );\n\t\t\t\tconst y = parseFloatWithUnits( b );\n\n\t\t\t\tif ( index === 0 ) {\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t}\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\tconst regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n\n\t\t\tconst path = new ShapePath();\n\n\t\t\tlet index = 0;\n\n\t\t\tnode.getAttribute( 'points' ).replace( regex, iterator );\n\n\t\t\tpath.currentPath.autoClose = true;\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\tfunction parsePolylineNode( node ) {\n\n\t\t\tfunction iterator( match, a, b ) {\n\n\t\t\t\tconst x = parseFloatWithUnits( a );\n\t\t\t\tconst y = parseFloatWithUnits( b );\n\n\t\t\t\tif ( index === 0 ) {\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t}\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\tconst regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n\n\t\t\tconst path = new ShapePath();\n\n\t\t\tlet index = 0;\n\n\t\t\tnode.getAttribute( 'points' ).replace( regex, iterator );\n\n\t\t\tpath.currentPath.autoClose = false;\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\tfunction parseCircleNode( node ) {\n\n\t\t\tconst x = parseFloatWithUnits( node.getAttribute( 'cx' ) || 0 );\n\t\t\tconst y = parseFloatWithUnits( node.getAttribute( 'cy' ) || 0 );\n\t\t\tconst r = parseFloatWithUnits( node.getAttribute( 'r' ) || 0 );\n\n\t\t\tconst subpath = new Path();\n\t\t\tsubpath.absarc( x, y, r, 0, Math.PI * 2 );\n\n\t\t\tconst path = new ShapePath();\n\t\t\tpath.subPaths.push( subpath );\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\tfunction parseEllipseNode( node ) {\n\n\t\t\tconst x = parseFloatWithUnits( node.getAttribute( 'cx' ) || 0 );\n\t\t\tconst y = parseFloatWithUnits( node.getAttribute( 'cy' ) || 0 );\n\t\t\tconst rx = parseFloatWithUnits( node.getAttribute( 'rx' ) || 0 );\n\t\t\tconst ry = parseFloatWithUnits( node.getAttribute( 'ry' ) || 0 );\n\n\t\t\tconst subpath = new Path();\n\t\t\tsubpath.absellipse( x, y, rx, ry, 0, Math.PI * 2 );\n\n\t\t\tconst path = new ShapePath();\n\t\t\tpath.subPaths.push( subpath );\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\tfunction parseLineNode( node ) {\n\n\t\t\tconst x1 = parseFloatWithUnits( node.getAttribute( 'x1' ) || 0 );\n\t\t\tconst y1 = parseFloatWithUnits( node.getAttribute( 'y1' ) || 0 );\n\t\t\tconst x2 = parseFloatWithUnits( node.getAttribute( 'x2' ) || 0 );\n\t\t\tconst y2 = parseFloatWithUnits( node.getAttribute( 'y2' ) || 0 );\n\n\t\t\tconst path = new ShapePath();\n\t\t\tpath.moveTo( x1, y1 );\n\t\t\tpath.lineTo( x2, y2 );\n\t\t\tpath.currentPath.autoClose = false;\n\n\t\t\treturn path;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction parseStyle( node, style ) {\n\n\t\t\tstyle = Object.assign( {}, style ); // clone style\n\n\t\t\tlet stylesheetStyles = {};\n\n\t\t\tif ( node.hasAttribute( 'class' ) ) {\n\n\t\t\t\tconst classSelectors = node.getAttribute( 'class' )\n\t\t\t\t\t.split( /\\s/ )\n\t\t\t\t\t.filter( Boolean )\n\t\t\t\t\t.map( i => i.trim() );\n\n\t\t\t\tfor ( let i = 0; i < classSelectors.length; i ++ ) {\n\n\t\t\t\t\tstylesheetStyles = Object.assign( stylesheetStyles, stylesheets[ '.' + classSelectors[ i ] ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( node.hasAttribute( 'id' ) ) {\n\n\t\t\t\tstylesheetStyles = Object.assign( stylesheetStyles, stylesheets[ '#' + node.getAttribute( 'id' ) ] );\n\n\t\t\t}\n\n\t\t\tfunction addStyle( svgName, jsName, adjustFunction ) {\n\n\t\t\t\tif ( adjustFunction === undefined ) adjustFunction = function copy( v ) {\n\n\t\t\t\t\tif ( v.startsWith( 'url' ) ) console.warn( 'SVGLoader: url access in attributes is not implemented.' );\n\n\t\t\t\t\treturn v;\n\n\t\t\t\t};\n\n\t\t\t\tif ( node.hasAttribute( svgName ) ) style[ jsName ] = adjustFunction( node.getAttribute( svgName ) );\n\t\t\t\tif ( stylesheetStyles[ svgName ] ) style[ jsName ] = adjustFunction( stylesheetStyles[ svgName ] );\n\t\t\t\tif ( node.style && node.style[ svgName ] !== '' ) style[ jsName ] = adjustFunction( node.style[ svgName ] );\n\n\t\t\t}\n\n\t\t\tfunction clamp( v ) {\n\n\t\t\t\treturn Math.max( 0, Math.min( 1, parseFloatWithUnits( v ) ) );\n\n\t\t\t}\n\n\t\t\tfunction positive( v ) {\n\n\t\t\t\treturn Math.max( 0, parseFloatWithUnits( v ) );\n\n\t\t\t}\n\n\t\t\taddStyle( 'fill', 'fill' );\n\t\t\taddStyle( 'fill-opacity', 'fillOpacity', clamp );\n\t\t\taddStyle( 'opacity', 'opacity', clamp );\n\t\t\taddStyle( 'stroke', 'stroke' );\n\t\t\taddStyle( 'stroke-opacity', 'strokeOpacity', clamp );\n\t\t\taddStyle( 'stroke-width', 'strokeWidth', positive );\n\t\t\taddStyle( 'stroke-linejoin', 'strokeLineJoin' );\n\t\t\taddStyle( 'stroke-linecap', 'strokeLineCap' );\n\t\t\taddStyle( 'stroke-miterlimit', 'strokeMiterLimit', positive );\n\t\t\taddStyle( 'visibility', 'visibility' );\n\n\t\t\treturn style;\n\n\t\t}\n\n\t\t// http://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes\n\n\t\tfunction getReflection( a, b ) {\n\n\t\t\treturn a - ( b - a );\n\n\t\t}\n\n\t\t// from https://github.com/ppvg/svg-numbers (MIT License)\n\n\t\tfunction parseFloats( input, flags, stride ) {\n\n\t\t\tif ( typeof input !== 'string' ) {\n\n\t\t\t\tthrow new TypeError( 'Invalid input: ' + typeof input );\n\n\t\t\t}\n\n\t\t\t// Character groups\n\t\t\tconst RE = {\n\t\t\t\tSEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n\t\t\t\tWHITESPACE: /[ \\t\\r\\n]/,\n\t\t\t\tDIGIT: /[\\d]/,\n\t\t\t\tSIGN: /[-+]/,\n\t\t\t\tPOINT: /\\./,\n\t\t\t\tCOMMA: /,/,\n\t\t\t\tEXP: /e/i,\n\t\t\t\tFLAGS: /[01]/\n\t\t\t};\n\n\t\t\t// States\n\t\t\tconst SEP = 0;\n\t\t\tconst INT = 1;\n\t\t\tconst FLOAT = 2;\n\t\t\tconst EXP = 3;\n\n\t\t\tlet state = SEP;\n\t\t\tlet seenComma = true;\n\t\t\tlet number = '', exponent = '';\n\t\t\tconst result = [];\n\n\t\t\tfunction throwSyntaxError( current, i, partial ) {\n\n\t\t\t\tconst error = new SyntaxError( 'Unexpected character \"' + current + '\" at index ' + i + '.' );\n\t\t\t\terror.partial = partial;\n\t\t\t\tthrow error;\n\n\t\t\t}\n\n\t\t\tfunction newNumber() {\n\n\t\t\t\tif ( number !== '' ) {\n\n\t\t\t\t\tif ( exponent === '' ) result.push( Number( number ) );\n\t\t\t\t\telse result.push( Number( number ) * Math.pow( 10, Number( exponent ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tnumber = '';\n\t\t\t\texponent = '';\n\n\t\t\t}\n\n\t\t\tlet current;\n\t\t\tconst length = input.length;\n\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\tcurrent = input[ i ];\n\n\t\t\t\t// check for flags\n\t\t\t\tif ( Array.isArray( flags ) && flags.includes( result.length % stride ) && RE.FLAGS.test( current ) ) {\n\n\t\t\t\t\tstate = INT;\n\t\t\t\t\tnumber = current;\n\t\t\t\t\tnewNumber();\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// parse until next number\n\t\t\t\tif ( state === SEP ) {\n\n\t\t\t\t\t// eat whitespace\n\t\t\t\t\tif ( RE.WHITESPACE.test( current ) ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// start new number\n\t\t\t\t\tif ( RE.DIGIT.test( current ) || RE.SIGN.test( current ) ) {\n\n\t\t\t\t\t\tstate = INT;\n\t\t\t\t\t\tnumber = current;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( RE.POINT.test( current ) ) {\n\n\t\t\t\t\t\tstate = FLOAT;\n\t\t\t\t\t\tnumber = current;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// throw on double commas (e.g. \"1, , 2\")\n\t\t\t\t\tif ( RE.COMMA.test( current ) ) {\n\n\t\t\t\t\t\tif ( seenComma ) {\n\n\t\t\t\t\t\t\tthrowSyntaxError( current, i, result );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tseenComma = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// parse integer part\n\t\t\t\tif ( state === INT ) {\n\n\t\t\t\t\tif ( RE.DIGIT.test( current ) ) {\n\n\t\t\t\t\t\tnumber += current;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( RE.POINT.test( current ) ) {\n\n\t\t\t\t\t\tnumber += current;\n\t\t\t\t\t\tstate = FLOAT;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( RE.EXP.test( current ) ) {\n\n\t\t\t\t\t\tstate = EXP;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// throw on double signs (\"-+1\"), but not on sign as separator (\"-1-2\")\n\t\t\t\t\tif ( RE.SIGN.test( current )\n\t\t\t\t\t\t\t&& number.length === 1\n\t\t\t\t\t\t\t&& RE.SIGN.test( number[ 0 ] ) ) {\n\n\t\t\t\t\t\tthrowSyntaxError( current, i, result );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// parse decimal part\n\t\t\t\tif ( state === FLOAT ) {\n\n\t\t\t\t\tif ( RE.DIGIT.test( current ) ) {\n\n\t\t\t\t\t\tnumber += current;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( RE.EXP.test( current ) ) {\n\n\t\t\t\t\t\tstate = EXP;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// throw on double decimal points (e.g. \"1..2\")\n\t\t\t\t\tif ( RE.POINT.test( current ) && number[ number.length - 1 ] === '.' ) {\n\n\t\t\t\t\t\tthrowSyntaxError( current, i, result );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// parse exponent part\n\t\t\t\tif ( state === EXP ) {\n\n\t\t\t\t\tif ( RE.DIGIT.test( current ) ) {\n\n\t\t\t\t\t\texponent += current;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( RE.SIGN.test( current ) ) {\n\n\t\t\t\t\t\tif ( exponent === '' ) {\n\n\t\t\t\t\t\t\texponent += current;\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( exponent.length === 1 && RE.SIGN.test( exponent ) ) {\n\n\t\t\t\t\t\t\tthrowSyntaxError( current, i, result );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\t// end of number\n\t\t\t\tif ( RE.WHITESPACE.test( current ) ) {\n\n\t\t\t\t\tnewNumber();\n\t\t\t\t\tstate = SEP;\n\t\t\t\t\tseenComma = false;\n\n\t\t\t\t} else if ( RE.COMMA.test( current ) ) {\n\n\t\t\t\t\tnewNumber();\n\t\t\t\t\tstate = SEP;\n\t\t\t\t\tseenComma = true;\n\n\t\t\t\t} else if ( RE.SIGN.test( current ) ) {\n\n\t\t\t\t\tnewNumber();\n\t\t\t\t\tstate = INT;\n\t\t\t\t\tnumber = current;\n\n\t\t\t\t} else if ( RE.POINT.test( current ) ) {\n\n\t\t\t\t\tnewNumber();\n\t\t\t\t\tstate = FLOAT;\n\t\t\t\t\tnumber = current;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrowSyntaxError( current, i, result );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add the last number found (if any)\n\t\t\tnewNumber();\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\t// Units\n\n\t\tconst units = [ 'mm', 'cm', 'in', 'pt', 'pc', 'px' ];\n\n\t\t// Conversion: [ fromUnit ][ toUnit ] (-1 means dpi dependent)\n\t\tconst unitConversion = {\n\n\t\t\t'mm': {\n\t\t\t\t'mm': 1,\n\t\t\t\t'cm': 0.1,\n\t\t\t\t'in': 1 / 25.4,\n\t\t\t\t'pt': 72 / 25.4,\n\t\t\t\t'pc': 6 / 25.4,\n\t\t\t\t'px': - 1\n\t\t\t},\n\t\t\t'cm': {\n\t\t\t\t'mm': 10,\n\t\t\t\t'cm': 1,\n\t\t\t\t'in': 1 / 2.54,\n\t\t\t\t'pt': 72 / 2.54,\n\t\t\t\t'pc': 6 / 2.54,\n\t\t\t\t'px': - 1\n\t\t\t},\n\t\t\t'in': {\n\t\t\t\t'mm': 25.4,\n\t\t\t\t'cm': 2.54,\n\t\t\t\t'in': 1,\n\t\t\t\t'pt': 72,\n\t\t\t\t'pc': 6,\n\t\t\t\t'px': - 1\n\t\t\t},\n\t\t\t'pt': {\n\t\t\t\t'mm': 25.4 / 72,\n\t\t\t\t'cm': 2.54 / 72,\n\t\t\t\t'in': 1 / 72,\n\t\t\t\t'pt': 1,\n\t\t\t\t'pc': 6 / 72,\n\t\t\t\t'px': - 1\n\t\t\t},\n\t\t\t'pc': {\n\t\t\t\t'mm': 25.4 / 6,\n\t\t\t\t'cm': 2.54 / 6,\n\t\t\t\t'in': 1 / 6,\n\t\t\t\t'pt': 72 / 6,\n\t\t\t\t'pc': 1,\n\t\t\t\t'px': - 1\n\t\t\t},\n\t\t\t'px': {\n\t\t\t\t'px': 1\n\t\t\t}\n\n\t\t};\n\n\t\tfunction parseFloatWithUnits( string ) {\n\n\t\t\tlet theUnit = 'px';\n\n\t\t\tif ( typeof string === 'string' || string instanceof String ) {\n\n\t\t\t\tfor ( let i = 0, n = units.length; i < n; i ++ ) {\n\n\t\t\t\t\tconst u = units[ i ];\n\n\t\t\t\t\tif ( string.endsWith( u ) ) {\n\n\t\t\t\t\t\ttheUnit = u;\n\t\t\t\t\t\tstring = string.substring( 0, string.length - u.length );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlet scale = undefined;\n\n\t\t\tif ( theUnit === 'px' && scope.defaultUnit !== 'px' ) {\n\n\t\t\t\t// Conversion scale from  pixels to inches, then to default units\n\n\t\t\t\tscale = unitConversion[ 'in' ][ scope.defaultUnit ] / scope.defaultDPI;\n\n\t\t\t} else {\n\n\t\t\t\tscale = unitConversion[ theUnit ][ scope.defaultUnit ];\n\n\t\t\t\tif ( scale < 0 ) {\n\n\t\t\t\t\t// Conversion scale to pixels\n\n\t\t\t\t\tscale = unitConversion[ theUnit ][ 'in' ] * scope.defaultDPI;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn scale * parseFloat( string );\n\n\t\t}\n\n\t\t// Transforms\n\n\t\tfunction getNodeTransform( node ) {\n\n\t\t\tif ( ! ( node.hasAttribute( 'transform' ) || ( node.nodeName === 'use' && ( node.hasAttribute( 'x' ) || node.hasAttribute( 'y' ) ) ) ) ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tconst transform = parseNodeTransform( node );\n\n\t\t\tif ( transformStack.length > 0 ) {\n\n\t\t\t\ttransform.premultiply( transformStack[ transformStack.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tcurrentTransform.copy( transform );\n\t\t\ttransformStack.push( transform );\n\n\t\t\treturn transform;\n\n\t\t}\n\n\t\tfunction parseNodeTransform( node ) {\n\n\t\t\tconst transform = new Matrix3();\n\t\t\tconst currentTransform = tempTransform0;\n\n\t\t\tif ( node.nodeName === 'use' && ( node.hasAttribute( 'x' ) || node.hasAttribute( 'y' ) ) ) {\n\n\t\t\t\tconst tx = parseFloatWithUnits( node.getAttribute( 'x' ) );\n\t\t\t\tconst ty = parseFloatWithUnits( node.getAttribute( 'y' ) );\n\n\t\t\t\ttransform.translate( tx, ty );\n\n\t\t\t}\n\n\t\t\tif ( node.hasAttribute( 'transform' ) ) {\n\n\t\t\t\tconst transformsTexts = node.getAttribute( 'transform' ).split( ')' );\n\n\t\t\t\tfor ( let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex -- ) {\n\n\t\t\t\t\tconst transformText = transformsTexts[ tIndex ].trim();\n\n\t\t\t\t\tif ( transformText === '' ) continue;\n\n\t\t\t\t\tconst openParPos = transformText.indexOf( '(' );\n\t\t\t\t\tconst closeParPos = transformText.length;\n\n\t\t\t\t\tif ( openParPos > 0 && openParPos < closeParPos ) {\n\n\t\t\t\t\t\tconst transformType = transformText.substr( 0, openParPos );\n\n\t\t\t\t\t\tconst array = parseFloats( transformText.substr( openParPos + 1, closeParPos - openParPos - 1 ) );\n\n\t\t\t\t\t\tcurrentTransform.identity();\n\n\t\t\t\t\t\tswitch ( transformType ) {\n\n\t\t\t\t\t\t\tcase 'translate':\n\n\t\t\t\t\t\t\t\tif ( array.length >= 1 ) {\n\n\t\t\t\t\t\t\t\t\tconst tx = array[ 0 ];\n\t\t\t\t\t\t\t\t\tlet ty = tx;\n\n\t\t\t\t\t\t\t\t\tif ( array.length >= 2 ) {\n\n\t\t\t\t\t\t\t\t\t\tty = array[ 1 ];\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.translate( tx, ty );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'rotate':\n\n\t\t\t\t\t\t\t\tif ( array.length >= 1 ) {\n\n\t\t\t\t\t\t\t\t\tlet angle = 0;\n\t\t\t\t\t\t\t\t\tlet cx = 0;\n\t\t\t\t\t\t\t\t\tlet cy = 0;\n\n\t\t\t\t\t\t\t\t\t// Angle\n\t\t\t\t\t\t\t\t\tangle = - array[ 0 ] * Math.PI / 180;\n\n\t\t\t\t\t\t\t\t\tif ( array.length >= 3 ) {\n\n\t\t\t\t\t\t\t\t\t\t// Center x, y\n\t\t\t\t\t\t\t\t\t\tcx = array[ 1 ];\n\t\t\t\t\t\t\t\t\t\tcy = array[ 2 ];\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Rotate around center (cx, cy)\n\t\t\t\t\t\t\t\t\ttempTransform1.identity().translate( - cx, - cy );\n\t\t\t\t\t\t\t\t\ttempTransform2.identity().rotate( angle );\n\t\t\t\t\t\t\t\t\ttempTransform3.multiplyMatrices( tempTransform2, tempTransform1 );\n\t\t\t\t\t\t\t\t\ttempTransform1.identity().translate( cx, cy );\n\t\t\t\t\t\t\t\t\tcurrentTransform.multiplyMatrices( tempTransform1, tempTransform3 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'scale':\n\n\t\t\t\t\t\t\t\tif ( array.length >= 1 ) {\n\n\t\t\t\t\t\t\t\t\tconst scaleX = array[ 0 ];\n\t\t\t\t\t\t\t\t\tlet scaleY = scaleX;\n\n\t\t\t\t\t\t\t\t\tif ( array.length >= 2 ) {\n\n\t\t\t\t\t\t\t\t\t\tscaleY = array[ 1 ];\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.scale( scaleX, scaleY );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'skewX':\n\n\t\t\t\t\t\t\t\tif ( array.length === 1 ) {\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.set(\n\t\t\t\t\t\t\t\t\t\t1, Math.tan( array[ 0 ] * Math.PI / 180 ), 0,\n\t\t\t\t\t\t\t\t\t\t0, 1, 0,\n\t\t\t\t\t\t\t\t\t\t0, 0, 1\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'skewY':\n\n\t\t\t\t\t\t\t\tif ( array.length === 1 ) {\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.set(\n\t\t\t\t\t\t\t\t\t\t1, 0, 0,\n\t\t\t\t\t\t\t\t\t\tMath.tan( array[ 0 ] * Math.PI / 180 ), 1, 0,\n\t\t\t\t\t\t\t\t\t\t0, 0, 1\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'matrix':\n\n\t\t\t\t\t\t\t\tif ( array.length === 6 ) {\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.set(\n\t\t\t\t\t\t\t\t\t\tarray[ 0 ], array[ 2 ], array[ 4 ],\n\t\t\t\t\t\t\t\t\t\tarray[ 1 ], array[ 3 ], array[ 5 ],\n\t\t\t\t\t\t\t\t\t\t0, 0, 1\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttransform.premultiply( currentTransform );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn transform;\n\n\t\t}\n\n\t\tfunction transformPath( path, m ) {\n\n\t\t\tfunction transfVec2( v2 ) {\n\n\t\t\t\ttempV3.set( v2.x, v2.y, 1 ).applyMatrix3( m );\n\n\t\t\t\tv2.set( tempV3.x, tempV3.y );\n\n\t\t\t}\n\n\t\t\tconst isRotated = isTransformRotated( m );\n\n\t\t\tconst subPaths = path.subPaths;\n\n\t\t\tfor ( let i = 0, n = subPaths.length; i < n; i ++ ) {\n\n\t\t\t\tconst subPath = subPaths[ i ];\n\t\t\t\tconst curves = subPath.curves;\n\n\t\t\t\tfor ( let j = 0; j < curves.length; j ++ ) {\n\n\t\t\t\t\tconst curve = curves[ j ];\n\n\t\t\t\t\tif ( curve.isLineCurve ) {\n\n\t\t\t\t\t\ttransfVec2( curve.v1 );\n\t\t\t\t\t\ttransfVec2( curve.v2 );\n\n\t\t\t\t\t} else if ( curve.isCubicBezierCurve ) {\n\n\t\t\t\t\t\ttransfVec2( curve.v0 );\n\t\t\t\t\t\ttransfVec2( curve.v1 );\n\t\t\t\t\t\ttransfVec2( curve.v2 );\n\t\t\t\t\t\ttransfVec2( curve.v3 );\n\n\t\t\t\t\t} else if ( curve.isQuadraticBezierCurve ) {\n\n\t\t\t\t\t\ttransfVec2( curve.v0 );\n\t\t\t\t\t\ttransfVec2( curve.v1 );\n\t\t\t\t\t\ttransfVec2( curve.v2 );\n\n\t\t\t\t\t} else if ( curve.isEllipseCurve ) {\n\n\t\t\t\t\t\tif ( isRotated ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttempV2.set( curve.aX, curve.aY );\n\t\t\t\t\t\ttransfVec2( tempV2 );\n\t\t\t\t\t\tcurve.aX = tempV2.x;\n\t\t\t\t\t\tcurve.aY = tempV2.y;\n\n\t\t\t\t\t\tcurve.xRadius *= getTransformScaleX( m );\n\t\t\t\t\t\tcurve.yRadius *= getTransformScaleY( m );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction isTransformRotated( m ) {\n\n\t\t\treturn m.elements[ 1 ] !== 0 || m.elements[ 3 ] !== 0;\n\n\t\t}\n\n\t\tfunction getTransformScaleX( m ) {\n\n\t\t\tconst te = m.elements;\n\t\t\treturn Math.sqrt( te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] );\n\n\t\t}\n\n\t\tfunction getTransformScaleY( m ) {\n\n\t\t\tconst te = m.elements;\n\t\t\treturn Math.sqrt( te[ 3 ] * te[ 3 ] + te[ 4 ] * te[ 4 ] );\n\n\t\t}\n\n\t\t//\n\n\t\tconst paths = [];\n\t\tconst stylesheets = {};\n\n\t\tconst transformStack = [];\n\n\t\tconst tempTransform0 = new Matrix3();\n\t\tconst tempTransform1 = new Matrix3();\n\t\tconst tempTransform2 = new Matrix3();\n\t\tconst tempTransform3 = new Matrix3();\n\t\tconst tempV2 = new Vector2();\n\t\tconst tempV3 = new Vector3();\n\n\t\tconst currentTransform = new Matrix3();\n\n\t\tconst xml = new DOMParser().parseFromString( text, 'image/svg+xml' ); // application/xml\n\n\t\tparseNode( xml.documentElement, {\n\t\t\tfill: '#000',\n\t\t\tfillOpacity: 1,\n\t\t\tstrokeOpacity: 1,\n\t\t\tstrokeWidth: 1,\n\t\t\tstrokeLineJoin: 'miter',\n\t\t\tstrokeLineCap: 'butt',\n\t\t\tstrokeMiterLimit: 4\n\t\t} );\n\n\t\tconst data = { paths: paths, xml: xml.documentElement };\n\n\t\t// console.log( paths );\n\t\treturn data;\n\n\t}\n\n\tstatic createShapes( shapePath ) {\n\n\t\t// Param shapePath: a shapepath as returned by the parse function of this class\n\t\t// Returns Shape object\n\n\t\tconst BIGNUMBER = 999999999;\n\n\t\tconst IntersectionLocationType = {\n\t\t\tORIGIN: 0,\n\t\t\tDESTINATION: 1,\n\t\t\tBETWEEN: 2,\n\t\t\tLEFT: 3,\n\t\t\tRIGHT: 4,\n\t\t\tBEHIND: 5,\n\t\t\tBEYOND: 6\n\t\t};\n\n\t\tconst classifyResult = {\n\t\t\tloc: IntersectionLocationType.ORIGIN,\n\t\t\tt: 0\n\t\t};\n\n\t\tfunction findEdgeIntersection( a0, a1, b0, b1 ) {\n\n\t\t\tconst x1 = a0.x;\n\t\t\tconst x2 = a1.x;\n\t\t\tconst x3 = b0.x;\n\t\t\tconst x4 = b1.x;\n\t\t\tconst y1 = a0.y;\n\t\t\tconst y2 = a1.y;\n\t\t\tconst y3 = b0.y;\n\t\t\tconst y4 = b1.y;\n\t\t\tconst nom1 = ( x4 - x3 ) * ( y1 - y3 ) - ( y4 - y3 ) * ( x1 - x3 );\n\t\t\tconst nom2 = ( x2 - x1 ) * ( y1 - y3 ) - ( y2 - y1 ) * ( x1 - x3 );\n\t\t\tconst denom = ( y4 - y3 ) * ( x2 - x1 ) - ( x4 - x3 ) * ( y2 - y1 );\n\t\t\tconst t1 = nom1 / denom;\n\t\t\tconst t2 = nom2 / denom;\n\n\t\t\tif ( ( ( denom === 0 ) && ( nom1 !== 0 ) ) || ( t1 <= 0 ) || ( t1 >= 1 ) || ( t2 < 0 ) || ( t2 > 1 ) ) {\n\n\t\t\t\t//1. lines are parallel or edges don't intersect\n\n\t\t\t\treturn null;\n\n\t\t\t} else if ( ( nom1 === 0 ) && ( denom === 0 ) ) {\n\n\t\t\t\t//2. lines are colinear\n\n\t\t\t\t//check if endpoints of edge2 (b0-b1) lies on edge1 (a0-a1)\n\t\t\t\tfor ( let i = 0; i < 2; i ++ ) {\n\n\t\t\t\t\tclassifyPoint( i === 0 ? b0 : b1, a0, a1 );\n\t\t\t\t\t//find position of this endpoints relatively to edge1\n\t\t\t\t\tif ( classifyResult.loc == IntersectionLocationType.ORIGIN ) {\n\n\t\t\t\t\t\tconst point = ( i === 0 ? b0 : b1 );\n\t\t\t\t\t\treturn { x: point.x, y: point.y, t: classifyResult.t };\n\n\t\t\t\t\t} else if ( classifyResult.loc == IntersectionLocationType.BETWEEN ) {\n\n\t\t\t\t\t\tconst x = + ( ( x1 + classifyResult.t * ( x2 - x1 ) ).toPrecision( 10 ) );\n\t\t\t\t\t\tconst y = + ( ( y1 + classifyResult.t * ( y2 - y1 ) ).toPrecision( 10 ) );\n\t\t\t\t\t\treturn { x: x, y: y, t: classifyResult.t, };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t} else {\n\n\t\t\t\t//3. edges intersect\n\n\t\t\t\tfor ( let i = 0; i < 2; i ++ ) {\n\n\t\t\t\t\tclassifyPoint( i === 0 ? b0 : b1, a0, a1 );\n\n\t\t\t\t\tif ( classifyResult.loc == IntersectionLocationType.ORIGIN ) {\n\n\t\t\t\t\t\tconst point = ( i === 0 ? b0 : b1 );\n\t\t\t\t\t\treturn { x: point.x, y: point.y, t: classifyResult.t };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst x = + ( ( x1 + t1 * ( x2 - x1 ) ).toPrecision( 10 ) );\n\t\t\t\tconst y = + ( ( y1 + t1 * ( y2 - y1 ) ).toPrecision( 10 ) );\n\t\t\t\treturn { x: x, y: y, t: t1 };\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction classifyPoint( p, edgeStart, edgeEnd ) {\n\n\t\t\tconst ax = edgeEnd.x - edgeStart.x;\n\t\t\tconst ay = edgeEnd.y - edgeStart.y;\n\t\t\tconst bx = p.x - edgeStart.x;\n\t\t\tconst by = p.y - edgeStart.y;\n\t\t\tconst sa = ax * by - bx * ay;\n\n\t\t\tif ( ( p.x === edgeStart.x ) && ( p.y === edgeStart.y ) ) {\n\n\t\t\t\tclassifyResult.loc = IntersectionLocationType.ORIGIN;\n\t\t\t\tclassifyResult.t = 0;\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ( p.x === edgeEnd.x ) && ( p.y === edgeEnd.y ) ) {\n\n\t\t\t\tclassifyResult.loc = IntersectionLocationType.DESTINATION;\n\t\t\t\tclassifyResult.t = 1;\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( sa < - Number.EPSILON ) {\n\n\t\t\t\tclassifyResult.loc = IntersectionLocationType.LEFT;\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( sa > Number.EPSILON ) {\n\n\t\t\t\tclassifyResult.loc = IntersectionLocationType.RIGHT;\n\t\t\t\treturn;\n\n\n\t\t\t}\n\n\t\t\tif ( ( ( ax * bx ) < 0 ) || ( ( ay * by ) < 0 ) ) {\n\n\t\t\t\tclassifyResult.loc = IntersectionLocationType.BEHIND;\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ( Math.sqrt( ax * ax + ay * ay ) ) < ( Math.sqrt( bx * bx + by * by ) ) ) {\n\n\t\t\t\tclassifyResult.loc = IntersectionLocationType.BEYOND;\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tlet t;\n\n\t\t\tif ( ax !== 0 ) {\n\n\t\t\t\tt = bx / ax;\n\n\t\t\t} else {\n\n\t\t\t\tt = by / ay;\n\n\t\t\t}\n\n\t\t\tclassifyResult.loc = IntersectionLocationType.BETWEEN;\n\t\t\tclassifyResult.t = t;\n\n\t\t}\n\n\t\tfunction getIntersections( path1, path2 ) {\n\n\t\t\tconst intersectionsRaw = [];\n\t\t\tconst intersections = [];\n\n\t\t\tfor ( let index = 1; index < path1.length; index ++ ) {\n\n\t\t\t\tconst path1EdgeStart = path1[ index - 1 ];\n\t\t\t\tconst path1EdgeEnd = path1[ index ];\n\n\t\t\t\tfor ( let index2 = 1; index2 < path2.length; index2 ++ ) {\n\n\t\t\t\t\tconst path2EdgeStart = path2[ index2 - 1 ];\n\t\t\t\t\tconst path2EdgeEnd = path2[ index2 ];\n\n\t\t\t\t\tconst intersection = findEdgeIntersection( path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd );\n\n\t\t\t\t\tif ( intersection !== null && intersectionsRaw.find( i => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON ) === undefined ) {\n\n\t\t\t\t\t\tintersectionsRaw.push( intersection );\n\t\t\t\t\t\tintersections.push( new Vector2( intersection.x, intersection.y ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn intersections;\n\n\t\t}\n\n\t\tfunction getScanlineIntersections( scanline, boundingBox, paths ) {\n\n\t\t\tconst center = new Vector2();\n\t\t\tboundingBox.getCenter( center );\n\n\t\t\tconst allIntersections = [];\n\n\t\t\tpaths.forEach( path => {\n\n\t\t\t\t// check if the center of the bounding box is in the bounding box of the paths.\n\t\t\t\t// this is a pruning method to limit the search of intersections in paths that can't envelop of the current path.\n\t\t\t\t// if a path envelops another path. The center of that oter path, has to be inside the bounding box of the enveloping path.\n\t\t\t\tif ( path.boundingBox.containsPoint( center ) ) {\n\n\t\t\t\t\tconst intersections = getIntersections( scanline, path.points );\n\n\t\t\t\t\tintersections.forEach( p => {\n\n\t\t\t\t\t\tallIntersections.push( { identifier: path.identifier, isCW: path.isCW, point: p } );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tallIntersections.sort( ( i1, i2 ) => {\n\n\t\t\t\treturn i1.point.x - i2.point.x;\n\n\t\t\t} );\n\n\t\t\treturn allIntersections;\n\n\t\t}\n\n\t\tfunction isHoleTo( simplePath, allPaths, scanlineMinX, scanlineMaxX, _fillRule ) {\n\n\t\t\tif ( _fillRule === null || _fillRule === undefined || _fillRule === '' ) {\n\n\t\t\t\t_fillRule = 'nonzero';\n\n\t\t\t}\n\n\t\t\tconst centerBoundingBox = new Vector2();\n\t\t\tsimplePath.boundingBox.getCenter( centerBoundingBox );\n\n\t\t\tconst scanline = [ new Vector2( scanlineMinX, centerBoundingBox.y ), new Vector2( scanlineMaxX, centerBoundingBox.y ) ];\n\n\t\t\tconst scanlineIntersections = getScanlineIntersections( scanline, simplePath.boundingBox, allPaths );\n\n\t\t\tscanlineIntersections.sort( ( i1, i2 ) => {\n\n\t\t\t\treturn i1.point.x - i2.point.x;\n\n\t\t\t} );\n\n\t\t\tconst baseIntersections = [];\n\t\t\tconst otherIntersections = [];\n\n\t\t\tscanlineIntersections.forEach( i => {\n\n\t\t\t\tif ( i.identifier === simplePath.identifier ) {\n\n\t\t\t\t\tbaseIntersections.push( i );\n\n\t\t\t\t} else {\n\n\t\t\t\t\totherIntersections.push( i );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tconst firstXOfPath = baseIntersections[ 0 ].point.x;\n\n\t\t\t// build up the path hierarchy\n\t\t\tconst stack = [];\n\t\t\tlet i = 0;\n\n\t\t\twhile ( i < otherIntersections.length && otherIntersections[ i ].point.x < firstXOfPath ) {\n\n\t\t\t\tif ( stack.length > 0 && stack[ stack.length - 1 ] === otherIntersections[ i ].identifier ) {\n\n\t\t\t\t\tstack.pop();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstack.push( otherIntersections[ i ].identifier );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\tstack.push( simplePath.identifier );\n\n\t\t\tif ( _fillRule === 'evenodd' ) {\n\n\t\t\t\tconst isHole = stack.length % 2 === 0 ? true : false;\n\t\t\t\tconst isHoleFor = stack[ stack.length - 2 ];\n\n\t\t\t\treturn { identifier: simplePath.identifier, isHole: isHole, for: isHoleFor };\n\n\t\t\t} else if ( _fillRule === 'nonzero' ) {\n\n\t\t\t\t// check if path is a hole by counting the amount of paths with alternating rotations it has to cross.\n\t\t\t\tlet isHole = true;\n\t\t\t\tlet isHoleFor = null;\n\t\t\t\tlet lastCWValue = null;\n\n\t\t\t\tfor ( let i = 0; i < stack.length; i ++ ) {\n\n\t\t\t\t\tconst identifier = stack[ i ];\n\t\t\t\t\tif ( isHole ) {\n\n\t\t\t\t\t\tlastCWValue = allPaths[ identifier ].isCW;\n\t\t\t\t\t\tisHole = false;\n\t\t\t\t\t\tisHoleFor = identifier;\n\n\t\t\t\t\t} else if ( lastCWValue !== allPaths[ identifier ].isCW ) {\n\n\t\t\t\t\t\tlastCWValue = allPaths[ identifier ].isCW;\n\t\t\t\t\t\tisHole = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn { identifier: simplePath.identifier, isHole: isHole, for: isHoleFor };\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'fill-rule: \"' + _fillRule + '\" is currently not implemented.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check for self intersecting paths\n\t\t// TODO\n\n\t\t// check intersecting paths\n\t\t// TODO\n\n\t\t// prepare paths for hole detection\n\t\tlet identifier = 0;\n\n\t\tlet scanlineMinX = BIGNUMBER;\n\t\tlet scanlineMaxX = - BIGNUMBER;\n\n\t\tlet simplePaths = shapePath.subPaths.map( p => {\n\n\t\t\tconst points = p.getPoints();\n\t\t\tlet maxY = - BIGNUMBER;\n\t\t\tlet minY = BIGNUMBER;\n\t\t\tlet maxX = - BIGNUMBER;\n\t\t\tlet minX = BIGNUMBER;\n\n\t      \t//points.forEach(p => p.y *= -1);\n\n\t\t\tfor ( let i = 0; i < points.length; i ++ ) {\n\n\t\t\t\tconst p = points[ i ];\n\n\t\t\t\tif ( p.y > maxY ) {\n\n\t\t\t\t\tmaxY = p.y;\n\n\t\t\t\t}\n\n\t\t\t\tif ( p.y < minY ) {\n\n\t\t\t\t\tminY = p.y;\n\n\t\t\t\t}\n\n\t\t\t\tif ( p.x > maxX ) {\n\n\t\t\t\t\tmaxX = p.x;\n\n\t\t\t\t}\n\n\t\t\t\tif ( p.x < minX ) {\n\n\t\t\t\t\tminX = p.x;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\t\t\tif ( scanlineMaxX <= maxX ) {\n\n\t\t\t\tscanlineMaxX = maxX + 1;\n\n\t\t\t}\n\n\t\t\tif ( scanlineMinX >= minX ) {\n\n\t\t\t\tscanlineMinX = minX - 1;\n\n\t\t\t}\n\n\t\t\treturn { points: points, isCW: ShapeUtils.isClockWise( points ), identifier: identifier ++, boundingBox: new Box2( new Vector2( minX, minY ), new Vector2( maxX, maxY ) ) };\n\n\t\t} );\n\n\t\tsimplePaths = simplePaths.filter( sp => sp.points.length > 1 );\n\n\t\t// check if path is solid or a hole\n\t\tconst isAHole = simplePaths.map( p => isHoleTo( p, simplePaths, scanlineMinX, scanlineMaxX, shapePath.userData.style.fillRule ) );\n\n\n\t\tconst shapesToReturn = [];\n\t\tsimplePaths.forEach( p => {\n\n\t\t\tconst amIAHole = isAHole[ p.identifier ];\n\n\t\t\tif ( ! amIAHole.isHole ) {\n\n\t\t\t\tconst shape = new Shape( p.points );\n\t\t\t\tconst holes = isAHole.filter( h => h.isHole && h.for === p.identifier );\n\t\t\t\tholes.forEach( h => {\n\n\t\t\t\t\tconst path = simplePaths[ h.identifier ];\n\t\t\t\t\tshape.holes.push( new Path( path.points ) );\n\n\t\t\t\t} );\n\t\t\t\tshapesToReturn.push( shape );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn shapesToReturn;\n\n\t}\n\n\tstatic getStrokeStyle( width, color, lineJoin, lineCap, miterLimit ) {\n\n\t\t// Param width: Stroke width\n\t\t// Param color: As returned by THREE.Color.getStyle()\n\t\t// Param lineJoin: One of \"round\", \"bevel\", \"miter\" or \"miter-limit\"\n\t\t// Param lineCap: One of \"round\", \"square\" or \"butt\"\n\t\t// Param miterLimit: Maximum join length, in multiples of the \"width\" parameter (join is truncated if it exceeds that distance)\n\t\t// Returns style object\n\n\t\twidth = width !== undefined ? width : 1;\n\t\tcolor = color !== undefined ? color : '#000';\n\t\tlineJoin = lineJoin !== undefined ? lineJoin : 'miter';\n\t\tlineCap = lineCap !== undefined ? lineCap : 'butt';\n\t\tmiterLimit = miterLimit !== undefined ? miterLimit : 4;\n\n\t\treturn {\n\t\t\tstrokeColor: color,\n\t\t\tstrokeWidth: width,\n\t\t\tstrokeLineJoin: lineJoin,\n\t\t\tstrokeLineCap: lineCap,\n\t\t\tstrokeMiterLimit: miterLimit\n\t\t};\n\n\t}\n\n\tstatic pointsToStroke( points, style, arcDivisions, minDistance ) {\n\n\t\t// Generates a stroke with some witdh around the given path.\n\t\t// The path can be open or closed (last point equals to first point)\n\t\t// Param points: Array of Vector2D (the path). Minimum 2 points.\n\t\t// Param style: Object with SVG properties as returned by SVGLoader.getStrokeStyle(), or SVGLoader.parse() in the path.userData.style object\n\t\t// Params arcDivisions: Arc divisions for round joins and endcaps. (Optional)\n\t\t// Param minDistance: Points closer to this distance will be merged. (Optional)\n\t\t// Returns BufferGeometry with stroke triangles (In plane z = 0). UV coordinates are generated ('u' along path. 'v' across it, from left to right)\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tif ( SVGLoader.pointsToStrokeWithBuffers( points, style, arcDivisions, minDistance, vertices, normals, uvs ) === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\treturn geometry;\n\n\t}\n\n\tstatic pointsToStrokeWithBuffers( points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset ) {\n\n\t\t// This function can be called to update existing arrays or buffers.\n\t\t// Accepts same parameters as pointsToStroke, plus the buffers and optional offset.\n\t\t// Param vertexOffset: Offset vertices to start writing in the buffers (3 elements/vertex for vertices and normals, and 2 elements/vertex for uvs)\n\t\t// Returns number of written vertices / normals / uvs pairs\n\t\t// if 'vertices' parameter is undefined no triangles will be generated, but the returned vertices count will still be valid (useful to preallocate the buffers)\n\t\t// 'normals' and 'uvs' buffers are optional\n\n\t\tconst tempV2_1 = new Vector2();\n\t\tconst tempV2_2 = new Vector2();\n\t\tconst tempV2_3 = new Vector2();\n\t\tconst tempV2_4 = new Vector2();\n\t\tconst tempV2_5 = new Vector2();\n\t\tconst tempV2_6 = new Vector2();\n\t\tconst tempV2_7 = new Vector2();\n\t\tconst lastPointL = new Vector2();\n\t\tconst lastPointR = new Vector2();\n\t\tconst point0L = new Vector2();\n\t\tconst point0R = new Vector2();\n\t\tconst currentPointL = new Vector2();\n\t\tconst currentPointR = new Vector2();\n\t\tconst nextPointL = new Vector2();\n\t\tconst nextPointR = new Vector2();\n\t\tconst innerPoint = new Vector2();\n\t\tconst outerPoint = new Vector2();\n\n\t\tarcDivisions = arcDivisions !== undefined ? arcDivisions : 12;\n\t\tminDistance = minDistance !== undefined ? minDistance : 0.001;\n\t\tvertexOffset = vertexOffset !== undefined ? vertexOffset : 0;\n\n\t\t// First ensure there are no duplicated points\n\t\tpoints = removeDuplicatedPoints( points );\n\n\t\tconst numPoints = points.length;\n\n\t\tif ( numPoints < 2 ) return 0;\n\n\t\tconst isClosed = points[ 0 ].equals( points[ numPoints - 1 ] );\n\n\t\tlet currentPoint;\n\t\tlet previousPoint = points[ 0 ];\n\t\tlet nextPoint;\n\n\t\tconst strokeWidth2 = style.strokeWidth / 2;\n\n\t\tconst deltaU = 1 / ( numPoints - 1 );\n\t\tlet u0 = 0, u1;\n\n\t\tlet innerSideModified;\n\t\tlet joinIsOnLeftSide;\n\t\tlet isMiter;\n\t\tlet initialJoinIsOnLeftSide = false;\n\n\t\tlet numVertices = 0;\n\t\tlet currentCoordinate = vertexOffset * 3;\n\t\tlet currentCoordinateUV = vertexOffset * 2;\n\n\t\t// Get initial left and right stroke points\n\t\tgetNormal( points[ 0 ], points[ 1 ], tempV2_1 ).multiplyScalar( strokeWidth2 );\n\t\tlastPointL.copy( points[ 0 ] ).sub( tempV2_1 );\n\t\tlastPointR.copy( points[ 0 ] ).add( tempV2_1 );\n\t\tpoint0L.copy( lastPointL );\n\t\tpoint0R.copy( lastPointR );\n\n\t\tfor ( let iPoint = 1; iPoint < numPoints; iPoint ++ ) {\n\n\t\t\tcurrentPoint = points[ iPoint ];\n\n\t\t\t// Get next point\n\t\t\tif ( iPoint === numPoints - 1 ) {\n\n\t\t\t\tif ( isClosed ) {\n\n\t\t\t\t\t// Skip duplicated initial point\n\t\t\t\t\tnextPoint = points[ 1 ];\n\n\t\t\t\t} else nextPoint = undefined;\n\n\t\t\t} else {\n\n\t\t\t\tnextPoint = points[ iPoint + 1 ];\n\n\t\t\t}\n\n\t\t\t// Normal of previous segment in tempV2_1\n\t\t\tconst normal1 = tempV2_1;\n\t\t\tgetNormal( previousPoint, currentPoint, normal1 );\n\n\t\t\ttempV2_3.copy( normal1 ).multiplyScalar( strokeWidth2 );\n\t\t\tcurrentPointL.copy( currentPoint ).sub( tempV2_3 );\n\t\t\tcurrentPointR.copy( currentPoint ).add( tempV2_3 );\n\n\t\t\tu1 = u0 + deltaU;\n\n\t\t\tinnerSideModified = false;\n\n\t\t\tif ( nextPoint !== undefined ) {\n\n\t\t\t\t// Normal of next segment in tempV2_2\n\t\t\t\tgetNormal( currentPoint, nextPoint, tempV2_2 );\n\n\t\t\t\ttempV2_3.copy( tempV2_2 ).multiplyScalar( strokeWidth2 );\n\t\t\t\tnextPointL.copy( currentPoint ).sub( tempV2_3 );\n\t\t\t\tnextPointR.copy( currentPoint ).add( tempV2_3 );\n\n\t\t\t\tjoinIsOnLeftSide = true;\n\t\t\t\ttempV2_3.subVectors( nextPoint, previousPoint );\n\t\t\t\tif ( normal1.dot( tempV2_3 ) < 0 ) {\n\n\t\t\t\t\tjoinIsOnLeftSide = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( iPoint === 1 ) initialJoinIsOnLeftSide = joinIsOnLeftSide;\n\n\t\t\t\ttempV2_3.subVectors( nextPoint, currentPoint );\n\t\t\t\ttempV2_3.normalize();\n\t\t\t\tconst dot = Math.abs( normal1.dot( tempV2_3 ) );\n\n\t\t\t\t// If path is straight, don't create join\n\t\t\t\tif ( dot !== 0 ) {\n\n\t\t\t\t\t// Compute inner and outer segment intersections\n\t\t\t\t\tconst miterSide = strokeWidth2 / dot;\n\t\t\t\t\ttempV2_3.multiplyScalar( - miterSide );\n\t\t\t\t\ttempV2_4.subVectors( currentPoint, previousPoint );\n\t\t\t\t\ttempV2_5.copy( tempV2_4 ).setLength( miterSide ).add( tempV2_3 );\n\t\t\t\t\tinnerPoint.copy( tempV2_5 ).negate();\n\t\t\t\t\tconst miterLength2 = tempV2_5.length();\n\t\t\t\t\tconst segmentLengthPrev = tempV2_4.length();\n\t\t\t\t\ttempV2_4.divideScalar( segmentLengthPrev );\n\t\t\t\t\ttempV2_6.subVectors( nextPoint, currentPoint );\n\t\t\t\t\tconst segmentLengthNext = tempV2_6.length();\n\t\t\t\t\ttempV2_6.divideScalar( segmentLengthNext );\n\t\t\t\t\t// Check that previous and next segments doesn't overlap with the innerPoint of intersection\n\t\t\t\t\tif ( tempV2_4.dot( innerPoint ) < segmentLengthPrev && tempV2_6.dot( innerPoint ) < segmentLengthNext ) {\n\n\t\t\t\t\t\tinnerSideModified = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\touterPoint.copy( tempV2_5 ).add( currentPoint );\n\t\t\t\t\tinnerPoint.add( currentPoint );\n\n\t\t\t\t\tisMiter = false;\n\n\t\t\t\t\tif ( innerSideModified ) {\n\n\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\tnextPointR.copy( innerPoint );\n\t\t\t\t\t\t\tcurrentPointR.copy( innerPoint );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tnextPointL.copy( innerPoint );\n\t\t\t\t\t\t\tcurrentPointL.copy( innerPoint );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// The segment triangles are generated here if there was overlapping\n\n\t\t\t\t\t\tmakeSegmentTriangles();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch ( style.strokeLineJoin ) {\n\n\t\t\t\t\t\tcase 'bevel':\n\n\t\t\t\t\t\t\tmakeSegmentWithBevelJoin( joinIsOnLeftSide, innerSideModified, u1 );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'round':\n\n\t\t\t\t\t\t\t// Segment triangles\n\n\t\t\t\t\t\t\tcreateSegmentTrianglesWithMiddleSection( joinIsOnLeftSide, innerSideModified );\n\n\t\t\t\t\t\t\t// Join triangles\n\n\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\tmakeCircularSector( currentPoint, currentPointL, nextPointL, u1, 0 );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tmakeCircularSector( currentPoint, nextPointR, currentPointR, u1, 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'miter':\n\t\t\t\t\t\tcase 'miter-clip':\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconst miterFraction = ( strokeWidth2 * style.strokeMiterLimit ) / miterLength2;\n\n\t\t\t\t\t\t\tif ( miterFraction < 1 ) {\n\n\t\t\t\t\t\t\t\t// The join miter length exceeds the miter limit\n\n\t\t\t\t\t\t\t\tif ( style.strokeLineJoin !== 'miter-clip' ) {\n\n\t\t\t\t\t\t\t\t\tmakeSegmentWithBevelJoin( joinIsOnLeftSide, innerSideModified, u1 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t// Segment triangles\n\n\t\t\t\t\t\t\t\t\tcreateSegmentTrianglesWithMiddleSection( joinIsOnLeftSide, innerSideModified );\n\n\t\t\t\t\t\t\t\t\t// Miter-clip join triangles\n\n\t\t\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\t\t\ttempV2_6.subVectors( outerPoint, currentPointL ).multiplyScalar( miterFraction ).add( currentPointL );\n\t\t\t\t\t\t\t\t\t\ttempV2_7.subVectors( outerPoint, nextPointL ).multiplyScalar( miterFraction ).add( nextPointL );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_6, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_6, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_7, u1, 0 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_7, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( nextPointL, u1, 0 );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\ttempV2_6.subVectors( outerPoint, currentPointR ).multiplyScalar( miterFraction ).add( currentPointR );\n\t\t\t\t\t\t\t\t\t\ttempV2_7.subVectors( outerPoint, nextPointR ).multiplyScalar( miterFraction ).add( nextPointR );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_6, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_6, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_7, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_7, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( nextPointR, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Miter join segment triangles\n\n\t\t\t\t\t\t\t\tif ( innerSideModified ) {\n\n\t\t\t\t\t\t\t\t\t// Optimized segment + join triangles\n\n\t\t\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 0 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\t\t\tnextPointL.copy( outerPoint );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tnextPointR.copy( outerPoint );\n\n\t\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t// Add extra miter join triangles\n\n\t\t\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 0 );\n\t\t\t\t\t\t\t\t\t\taddVertex( nextPointL, u1, 0 );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 1 );\n\t\t\t\t\t\t\t\t\t\taddVertex( nextPointR, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tisMiter = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// The segment triangles are generated here when two consecutive points are collinear\n\n\t\t\t\t\tmakeSegmentTriangles();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// The segment triangles are generated here if it is the ending segment\n\n\t\t\t\tmakeSegmentTriangles();\n\n\t\t\t}\n\n\t\t\tif ( ! isClosed && iPoint === numPoints - 1 ) {\n\n\t\t\t\t// Start line endcap\n\t\t\t\taddCapGeometry( points[ 0 ], point0L, point0R, joinIsOnLeftSide, true, u0 );\n\n\t\t\t}\n\n\t\t\t// Increment loop variables\n\n\t\t\tu0 = u1;\n\n\t\t\tpreviousPoint = currentPoint;\n\n\t\t\tlastPointL.copy( nextPointL );\n\t\t\tlastPointR.copy( nextPointR );\n\n\t\t}\n\n\t\tif ( ! isClosed ) {\n\n\t\t\t// Ending line endcap\n\t\t\taddCapGeometry( currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1 );\n\n\t\t} else if ( innerSideModified && vertices ) {\n\n\t\t\t// Modify path first segment vertices to adjust to the segments inner and outer intersections\n\n\t\t\tlet lastOuter = outerPoint;\n\t\t\tlet lastInner = innerPoint;\n\n\t\t\tif ( initialJoinIsOnLeftSide !== joinIsOnLeftSide ) {\n\n\t\t\t\tlastOuter = innerPoint;\n\t\t\t\tlastInner = outerPoint;\n\n\t\t\t}\n\n\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\tif ( isMiter || initialJoinIsOnLeftSide ) {\n\n\t\t\t\t\tlastInner.toArray( vertices, 0 * 3 );\n\t\t\t\t\tlastInner.toArray( vertices, 3 * 3 );\n\n\t\t\t\t\tif ( isMiter ) {\n\n\t\t\t\t\t\tlastOuter.toArray( vertices, 1 * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( isMiter || ! initialJoinIsOnLeftSide ) {\n\n\t\t\t\t\tlastInner.toArray( vertices, 1 * 3 );\n\t\t\t\t\tlastInner.toArray( vertices, 3 * 3 );\n\n\t\t\t\t\tif ( isMiter ) {\n\n\t\t\t\t\t\tlastOuter.toArray( vertices, 0 * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn numVertices;\n\n\t\t// -- End of algorithm\n\n\t\t// -- Functions\n\n\t\tfunction getNormal( p1, p2, result ) {\n\n\t\t\tresult.subVectors( p2, p1 );\n\t\t\treturn result.set( - result.y, result.x ).normalize();\n\n\t\t}\n\n\t\tfunction addVertex( position, u, v ) {\n\n\t\t\tif ( vertices ) {\n\n\t\t\t\tvertices[ currentCoordinate ] = position.x;\n\t\t\t\tvertices[ currentCoordinate + 1 ] = position.y;\n\t\t\t\tvertices[ currentCoordinate + 2 ] = 0;\n\n\t\t\t\tif ( normals ) {\n\n\t\t\t\t\tnormals[ currentCoordinate ] = 0;\n\t\t\t\t\tnormals[ currentCoordinate + 1 ] = 0;\n\t\t\t\t\tnormals[ currentCoordinate + 2 ] = 1;\n\n\t\t\t\t}\n\n\t\t\t\tcurrentCoordinate += 3;\n\n\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\tuvs[ currentCoordinateUV ] = u;\n\t\t\t\t\tuvs[ currentCoordinateUV + 1 ] = v;\n\n\t\t\t\t\tcurrentCoordinateUV += 2;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tnumVertices += 3;\n\n\t\t}\n\n\t\tfunction makeCircularSector( center, p1, p2, u, v ) {\n\n\t\t\t// param p1, p2: Points in the circle arc.\n\t\t\t// p1 and p2 are in clockwise direction.\n\n\t\t\ttempV2_1.copy( p1 ).sub( center ).normalize();\n\t\t\ttempV2_2.copy( p2 ).sub( center ).normalize();\n\n\t\t\tlet angle = Math.PI;\n\t\t\tconst dot = tempV2_1.dot( tempV2_2 );\n\t\t\tif ( Math.abs( dot ) < 1 ) angle = Math.abs( Math.acos( dot ) );\n\n\t\t\tangle /= arcDivisions;\n\n\t\t\ttempV2_3.copy( p1 );\n\n\t\t\tfor ( let i = 0, il = arcDivisions - 1; i < il; i ++ ) {\n\n\t\t\t\ttempV2_4.copy( tempV2_3 ).rotateAround( center, angle );\n\n\t\t\t\taddVertex( tempV2_3, u, v );\n\t\t\t\taddVertex( tempV2_4, u, v );\n\t\t\t\taddVertex( center, u, 0.5 );\n\n\t\t\t\ttempV2_3.copy( tempV2_4 );\n\n\t\t\t}\n\n\t\t\taddVertex( tempV2_4, u, v );\n\t\t\taddVertex( p2, u, v );\n\t\t\taddVertex( center, u, 0.5 );\n\n\t\t}\n\n\t\tfunction makeSegmentTriangles() {\n\n\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\taddVertex( currentPointL, u1, 0 );\n\n\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\taddVertex( currentPointL, u1, 1 );\n\t\t\taddVertex( currentPointR, u1, 0 );\n\n\t\t}\n\n\t\tfunction makeSegmentWithBevelJoin( joinIsOnLeftSide, innerSideModified, u ) {\n\n\t\t\tif ( innerSideModified ) {\n\n\t\t\t\t// Optimized segment + bevel triangles\n\n\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t// Path segments triangles\n\n\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\n\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t\t// Bevel join triangle\n\n\t\t\t\t\taddVertex( currentPointL, u, 0 );\n\t\t\t\t\taddVertex( nextPointL, u, 0 );\n\t\t\t\t\taddVertex( innerPoint, u, 0.5 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Path segments triangles\n\n\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\n\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\n\t\t\t\t\t// Bevel join triangle\n\n\t\t\t\t\taddVertex( currentPointR, u, 1 );\n\t\t\t\t\taddVertex( nextPointR, u, 0 );\n\t\t\t\t\taddVertex( innerPoint, u, 0.5 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Bevel join triangle. The segment triangles are done in the main loop\n\n\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\taddVertex( currentPointL, u, 0 );\n\t\t\t\t\taddVertex( nextPointL, u, 0 );\n\t\t\t\t\taddVertex( currentPoint, u, 0.5 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\taddVertex( currentPointR, u, 1 );\n\t\t\t\t\taddVertex( nextPointR, u, 0 );\n\t\t\t\t\taddVertex( currentPoint, u, 0.5 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction createSegmentTrianglesWithMiddleSection( joinIsOnLeftSide, innerSideModified ) {\n\n\t\t\tif ( innerSideModified ) {\n\n\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\n\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t\taddVertex( currentPointL, u0, 0 );\n\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\taddVertex( nextPointL, u0, 0 );\n\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\n\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\n\t\t\t\t\taddVertex( currentPointR, u0, 1 );\n\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\taddVertex( nextPointR, u0, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addCapGeometry( center, p1, p2, joinIsOnLeftSide, start, u ) {\n\n\t\t\t// param center: End point of the path\n\t\t\t// param p1, p2: Left and right cap points\n\n\t\t\tswitch ( style.strokeLineCap ) {\n\n\t\t\t\tcase 'round':\n\n\t\t\t\t\tif ( start ) {\n\n\t\t\t\t\t\tmakeCircularSector( center, p2, p1, u, 0.5 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmakeCircularSector( center, p1, p2, u, 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'square':\n\n\t\t\t\t\tif ( start ) {\n\n\t\t\t\t\t\ttempV2_1.subVectors( p1, center );\n\t\t\t\t\t\ttempV2_2.set( tempV2_1.y, - tempV2_1.x );\n\n\t\t\t\t\t\ttempV2_3.addVectors( tempV2_1, tempV2_2 ).add( center );\n\t\t\t\t\t\ttempV2_4.subVectors( tempV2_2, tempV2_1 ).add( center );\n\n\t\t\t\t\t\t// Modify already existing vertices\n\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\ttempV2_3.toArray( vertices, 1 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, 0 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, 3 * 3 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttempV2_3.toArray( vertices, 1 * 3 );\n\t\t\t\t\t\t\ttempV2_3.toArray( vertices, 3 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, 0 * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttempV2_1.subVectors( p2, center );\n\t\t\t\t\t\ttempV2_2.set( tempV2_1.y, - tempV2_1.x );\n\n\t\t\t\t\t\ttempV2_3.addVectors( tempV2_1, tempV2_2 ).add( center );\n\t\t\t\t\t\ttempV2_4.subVectors( tempV2_2, tempV2_1 ).add( center );\n\n\t\t\t\t\t\tconst vl = vertices.length;\n\n\t\t\t\t\t\t// Modify already existing vertices\n\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\ttempV2_3.toArray( vertices, vl - 1 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, vl - 2 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, vl - 4 * 3 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttempV2_3.toArray( vertices, vl - 2 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, vl - 1 * 3 );\n\t\t\t\t\t\t\ttempV2_4.toArray( vertices, vl - 4 * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'butt':\n\t\t\t\tdefault:\n\n\t\t\t\t\t// Nothing to do here\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction removeDuplicatedPoints( points ) {\n\n\t\t\t// Creates a new array if necessary with duplicated points removed.\n\t\t\t// This does not remove duplicated initial and ending points of a closed path.\n\n\t\t\tlet dupPoints = false;\n\t\t\tfor ( let i = 1, n = points.length - 1; i < n; i ++ ) {\n\n\t\t\t\tif ( points[ i ].distanceTo( points[ i + 1 ] ) < minDistance ) {\n\n\t\t\t\t\tdupPoints = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ! dupPoints ) return points;\n\n\t\t\tconst newPoints = [];\n\t\t\tnewPoints.push( points[ 0 ] );\n\n\t\t\tfor ( let i = 1, n = points.length - 1; i < n; i ++ ) {\n\n\t\t\t\tif ( points[ i ].distanceTo( points[ i + 1 ] ) >= minDistance ) {\n\n\t\t\t\t\tnewPoints.push( points[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tnewPoints.push( points[ points.length - 1 ] );\n\n\t\t\treturn newPoints;\n\n\t\t}\n\n\t}\n\n\n}\n\nexport { SVGLoader };\n","import Stats from \"stats-js\";\n\nconst stats = new Stats();\nstats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n\nexport function updateStats() {\n\tstats.update();\n}\n\nlet showStats = false;\nexport function toggleStats() {\n\tshowStats = !showStats;\n\tif (showStats) {\n\t\tdocument.body.appendChild(stats.dom);\n\t} else {\n\t\tstats.dom.remove();\n\t}\n}\n","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):e.Stats=t()}(this,function(){\"use strict\";var c=function(){var n=0,l=document.createElement(\"div\");function e(e){return l.appendChild(e.dom),e}function t(e){for(var t=0;t<l.children.length;t++)l.children[t].style.display=t===e?\"block\":\"none\";n=e}l.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\",l.addEventListener(\"click\",function(e){e.preventDefault(),t(++n%l.children.length)},!1);var i=(performance||Date).now(),a=i,o=0,f=e(new c.Panel(\"FPS\",\"#0ff\",\"#002\")),r=e(new c.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var d=e(new c.Panel(\"MB\",\"#f08\",\"#201\"));return t(0),{REVISION:16,dom:l,addPanel:e,showPanel:t,begin:function(){i=(performance||Date).now()},end:function(){o++;var e=(performance||Date).now();if(r.update(e-i,200),a+1e3<=e&&(f.update(1e3*o/(e-a),100),a=e,o=0,d)){var t=performance.memory;d.update(t.usedJSHeapSize/1048576,t.jsHeapSizeLimit/1048576)}return e},update:function(){i=this.end()},domElement:l,setMode:t}};return c.Panel=function(n,l,i){var a=1/0,o=0,f=Math.round,r=f(window.devicePixelRatio||1),d=80*r,e=48*r,c=3*r,p=2*r,u=3*r,s=15*r,m=74*r,h=30*r,y=document.createElement(\"canvas\");y.width=d,y.height=e,y.style.cssText=\"width:80px;height:48px\";var v=y.getContext(\"2d\");return v.font=\"bold \"+9*r+\"px Helvetica,Arial,sans-serif\",v.textBaseline=\"top\",v.fillStyle=i,v.fillRect(0,0,d,e),v.fillStyle=l,v.fillText(n,c,p),v.fillRect(u,s,m,h),v.fillStyle=i,v.globalAlpha=.9,v.fillRect(u,s,m,h),{dom:y,update:function(e,t){a=Math.min(a,e),o=Math.max(o,e),v.fillStyle=i,v.globalAlpha=1,v.fillRect(0,0,d,s),v.fillStyle=l,v.fillText(f(e)+\" \"+n+\" (\"+f(a)+\"-\"+f(o)+\")\",c,p),v.drawImage(y,u+r,s,m-r,h,u,s,m-r,h),v.fillRect(u+m-r,s,r,h),v.fillStyle=i,v.globalAlpha=.9,v.fillRect(u+m-r,s,r,f((1-e/t)*h))}}},c});\n"],"names":["$6OvZu","parcelRequire","$8TSCy","$d16b60c93d3061e4$export$959ae9097e74a233","Loader","manager","defaultDPI","_this","defaultUnit","key","value","url","onLoad","onProgress","onError","scope","this","loader","FileLoader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","parseArcCommand","rx","ry","x_axis_rotation","large_arc_flag","sweep_flag","start","end","Math","PI","abs","dx2","x","dy2","y","x1p","cos","sin","y1p","rxs","rys","x1ps","y1ps","cr","s","sqrt","dq","pq","q","max","cxp","cyp","cx","cy","theta","svgAngle","delta","currentPath","absellipse","lineTo","ux","uy","vx","vy","dot","len","ang","acos","min","parseStyle","node","style","Object","assign","stylesheetStyles","hasAttribute","classSelectors","getAttribute","split","filter","Boolean","map","i","trim","i3","length","stylesheets","addStyle","svgName","jsName","adjustFunction","undefined","v","startsWith","warn","clamp","parseFloatWithUnits","positive","getReflection","a","b","parseFloats","input","flags","stride","TypeError","typeOf","current1","RE","SEPARATOR","WHITESPACE","DIGIT","SIGN","POINT","COMMA","EXP","FLAGS","state","seenComma","number","exponent","result","throwSyntaxError","current","partial","SyntaxError","newNumber","push","Number","pow","i5","Array","isArray","includes","test","units","unitConversion","mm","cm","in","pt","pc","px","string","theUnit","String","n","u","endsWith","substring","scale","parseFloat","getTransformScaleX","m","te","elements","getTransformScaleY","paths","transformStack","tempTransform0","Matrix3","tempTransform1","tempTransform2","tempTransform3","tempV2","Vector2","tempV3","Vector3","currentTransform1","xml","DOMParser","parseFromString","parseNode","nodeType","transform","nodeName","currentTransform","tx","ty","translate","transformsTexts","tIndex","transformText","openParPos","indexOf","closeParPos","transformType","substr","array","identity","tx1","ty1","angle","rotate","multiplyMatrices","scaleX","scaleY","set","tan","premultiply","parseNodeTransform","copy","getNodeTransform","traverseChildNodes","stylesheet","sheet","cssRules","i1","type","selectorList","selectorText","j","parseCSSStylesheet","ShapePath","point","control","firstPoint","isFirstPoint","doSetFirstPoint","commands","match","l","command","charAt","data","numbers","jl","moveTo","j1","jl1","j2","jl2","j3","jl3","j4","jl4","bezierCurveTo","j5","jl5","j6","jl6","quadraticCurveTo","j7","jl7","j8","jl8","clone","j9","jl9","j10","jl10","j11","jl11","j12","jl12","j13","jl13","j14","jl14","j15","jl15","j16","jl16","rx1","ry1","j17","jl17","start1","autoClose","curves","currentPoint","parsePathNode","w","h","bci","parseRectNode","iterator","index","regex","replace","parsePolygonNode","parsePolylineNode","r","subpath","Path","absarc","subPaths","parseCircleNode","parseEllipseNode","x1","y1","x2","y2","parseLineNode","usedNodeId","href","baseVal","usedNode","viewportElement","getElementById","fill","color","setStyle","transfVec2","v2","applyMatrix3","isRotated","isTransformRotated","curve","isLineCurve","v1","isCubicBezierCurve","v0","v3","isQuadraticBezierCurve","isEllipseCurve","aX","aY","xRadius","yRadius","transformPath","userData","nodes","childNodes","pop","documentElement","fillOpacity","strokeOpacity","strokeWidth","strokeLineJoin","strokeLineCap","strokeMiterLimit","shapePath","BIGNUMBER","IntersectionLocationType","classifyResult","loc","t","classifyPoint","p","edgeStart","edgeEnd","ax","ay","bx","by","sa","EPSILON","getIntersections","path1","path2","path2EdgeStart","index2","path2EdgeEnd","intersection","a0","a1","b0","b1","x3","x4","y3","y4","nom1","denom","t1","t2","toPrecision","i6","point1","findEdgeIntersection","path1EdgeStart","path1EdgeEnd","intersectionsRaw","find","intersections","_loop","_loop1","isHoleTo","simplePath","allPaths","scanlineMinX","scanlineMaxX","_fillRule","centerBoundingBox","boundingBox","getCenter","scanlineIntersections","scanline","center","allIntersections","forEach","containsPoint","points","identifier","isCW","sort","i2","getScanlineIntersections","baseIntersections","otherIntersections","firstXOfPath","stack","i8","isHole","isHoleFor","for","isHole1","isHoleFor1","lastCWValue","i7","identifier1","scanlineMinX1","scanlineMaxX1","simplePaths","getPoints","maxY","minY","maxX","minX","_$p","ShapeUtils","isClockWise","Box2","isAHole","sp","fillRule","shapesToReturn","shape","Shape","holes","width","lineJoin","lineCap","miterLimit","strokeColor","arcDivisions","minDistance","vertices","normals","uvs","pointsToStrokeWithBuffers","geometry","BufferGeometry","setAttribute","Float32BufferAttribute","points1","vertexOffset","tempV2_1","tempV2_2","tempV2_3","tempV2_4","tempV2_5","tempV2_6","tempV2_7","lastPointL","lastPointR","point0L","point0R","currentPointL","currentPointR","nextPointL","nextPointR","innerPoint","outerPoint","numPoints","dupPoints","distanceTo","newPoints","i9","n1","removeDuplicatedPoints","nextPoint","u1","innerSideModified1","joinIsOnLeftSide1","isMiter","isClosed","equals","previousPoint","strokeWidth2","deltaU","u0","initialJoinIsOnLeftSide","numVertices","currentCoordinate","currentCoordinateUV","getNormal","multiplyScalar","sub","add","iPoint","normal1","subVectors","normalize","miterSide","setLength","negate","miterLength2","segmentLengthPrev","divideScalar","segmentLengthNext","makeSegmentTriangles","makeSegmentWithBevelJoin","createSegmentTrianglesWithMiddleSection","makeCircularSector","miterFraction","addVertex","addCapGeometry","lastOuter","lastInner","toArray","p1","p2","position","il","rotateAround","joinIsOnLeftSide","innerSideModified","addVectors","vl","$9a0281efa5d1b360$var$stats","$parcel$interopDefault","c1","document","createElement","e1","appendChild","dom","_$t","children","display","cssText","addEventListener","preventDefault","performance","Date","now","o","f","Panel","self","memory","d","REVISION","addPanel","showPanel","begin","_$e","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","round","window","devicePixelRatio","e2","c","height","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","drawImage","$9a0281efa5d1b360$var$showStats","$0e17a943605d4ce9$var$renderer","WebGLRenderer","antialias","alpha","setClearColor","setSize","innerWidth","innerHeight","body","$0e17a943605d4ce9$var$scene","Scene","$0e17a943605d4ce9$var$camera","PerspectiveCamera","z","$3bF5H","OrbitControls","param","group","Group","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","next","done","extrudeMaterial","MeshStandardMaterial","frontGlowMaterial","MeshBasicMaterial","side","BackSide","depthTest","shapes","toShapes","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","extrudeGeometry","ExtrudeGeometry","depth","bevelEnabled","extrudeMesh","Mesh","ShapeBufferGeometry","mesh","err","return","rotateZ","xhr","$0e17a943605d4ce9$var$light","HemisphereLight","remove","$0e17a943605d4ce9$var$animate","requestAnimationFrame","render"],"version":3,"file":"svg.6a25b59e.js.map"}