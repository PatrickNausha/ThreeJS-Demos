!function(){function e(e){return e&&e.__esModule?e.default:e}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},n={},i={},o=t.parcelRequire1287;null==o&&((o=function(e){if(e in n)return n[e].exports;if(e in i){var t=i[e];delete i[e];var o={id:e,exports:{}};return n[e]=o,t.call(o.exports,o,o.exports),o.exports}var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}).register=function(e,t){i[e]=t},t.parcelRequire1287=o);var a=o("6OvZu"),r=o("dUO1w"),l=o("3bF5H"),s=new(e(function(){"use strict";var e=function(){var t=0,n=document.createElement("div");function i(e){return n.appendChild(e.dom),e}function o(e){for(var i=0;i<n.children.length;i++)n.children[i].style.display=i===e?"block":"none";t=e}n.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",n.addEventListener("click",(function(e){e.preventDefault(),o(++t%n.children.length)}),!1);var a=(performance||Date).now(),r=a,l=0,s=i(new e.Panel("FPS","#0ff","#002")),d=i(new e.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var f=i(new e.Panel("MB","#f08","#201"));return o(0),{REVISION:16,dom:n,addPanel:i,showPanel:o,begin:function(){a=(performance||Date).now()},end:function(){l++;var e=(performance||Date).now();if(d.update(e-a,200),r+1e3<=e&&(s.update(1e3*l/(e-r),100),r=e,l=0,f)){var t=performance.memory;f.update(t.usedJSHeapSize/1048576,t.jsHeapSizeLimit/1048576)}return e},update:function(){a=this.end()},domElement:n,setMode:o}};return e.Panel=function(e,t,n){var i=1/0,o=0,a=Math.round,r=a(window.devicePixelRatio||1),l=80*r,s=48*r,d=3*r,f=2*r,u=3*r,c=15*r,g=74*r,m=30*r,v=document.createElement("canvas");v.width=l,v.height=s,v.style.cssText="width:80px;height:48px";var p=v.getContext("2d");return p.font="bold "+9*r+"px Helvetica,Arial,sans-serif",p.textBaseline="top",p.fillStyle=n,p.fillRect(0,0,l,s),p.fillStyle=t,p.fillText(e,d,f),p.fillRect(u,c,g,m),p.fillStyle=n,p.globalAlpha=.9,p.fillRect(u,c,g,m),{dom:v,update:function(s,h){i=Math.min(i,s),o=Math.max(o,s),p.fillStyle=n,p.globalAlpha=1,p.fillRect(0,0,l,c),p.fillStyle=t,p.fillText(a(s)+" "+e+" ("+a(i)+"-"+a(o)+")",d,f),p.drawImage(v,u+r,c,g-r,m,u,c,g-r,m),p.fillRect(u+g-r,c,r,m),p.fillStyle=n,p.globalAlpha=.9,p.fillRect(u+g-r,c,r,a((1-s/h)*m))}}},e}()));s.showPanel(0);var d=!1;var f=o("8MWs4"),u=o("8aNI6"),c=o("8uPQJ"),g=o("gy7bn"),m=o("74wVM"),v=new a.WebGLRenderer,p=window.devicePixelRatio||1,h=new a.Color(.07,.07,.15);v.setPixelRatio(p),v.setClearColor(h),v.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(v.domElement);var w=new a.Scene,y=new a.PerspectiveCamera(50,window.innerWidth/window.innerHeight,.1,1e3);y.position.x=0,y.position.y=2,y.position.z=10,new l.OrbitControls(y,v.domElement);var S={time:{value:1},scanLineScale:{value:1/p},scanLineIntensity:{value:.75},color:{value:new a.Vector3(.07,.07,.15)},lightingIntensity:{value:3.5},filmGrainIntensity:{value:.15},resolution:{value:new a.Vector2(window.innerWidth*p,window.innerHeight*p)},opacity:{value:.8},opacityJitterStrength:{value:.05},opacityJitterSpeed:{value:40},smoothStepLighting:{value:!0},exposure:{value:2},wiggleStrength:{value:2},wigglePeriod:{value:3},wiggleDuration:{value:.1}},x=new a.ShaderMaterial({transparent:!0,uniforms:S,vertexShader:"\n\t\tvarying vec3 vNormal;\n\t\tuniform mat4 inverseViewMatrix;\n\t\tuniform float time;\n\t\tuniform float wiggleStrength;\n\t\tuniform float wigglePeriod;\n\t\tuniform float wiggleDuration;\n\n\t\tvoid main()\n\t\t{\n\t\t\tvNormal = normal;\n\t\t\tfloat viewSpaceY = (modelViewMatrix * vec4(position, 1.0)).y;\n\t\t\tfloat wiggleFactor = 0.0;\n\t\t\tif (fract(time / wigglePeriod) > 1.0 - wiggleDuration) {\n\t\t\t\twiggleFactor = wiggleStrength;\n\t\t\t}\n\n\t\t\tfloat jitterScale = 25.0;\n\t\t\tfloat jitterSpeed = 80.0;\n\t\t\tfloat x = viewSpaceY * jitterScale + time * jitterSpeed;\n\t\t\tvec4 noiseShift = inverseViewMatrix * vec4(wiggleFactor * sin(x / 3.0) * sin(x / 13.0), 0.0, 0.0, 0.0);\n\t\t\tvec3 shiftedPosition = noiseShift.xyz / 7.0 + position;\n\t\t\tvec4 mvPosition = modelViewMatrix * vec4(shiftedPosition, 1.0);\n\t\t\tgl_Position = projectionMatrix * mvPosition;\n\t\t}",fragmentShader:'\n\t\t#define PI 3.141592653589793\n\t\tuniform float scanLineScale;\n\t\tuniform float scanLineIntensity;\n\t\tuniform float filmGrainIntensity;\n\t\tuniform float time;\n\t\tuniform float exposure;\n\t\tuniform vec3 color;\n\t\tuniform float opacity;\n\t\tuniform vec2 resolution;\n\t\tuniform float lightingIntensity;\n\t\tuniform bool smoothStepLighting;\n\t\tuniform float opacityJitterStrength;\n\t\tuniform float opacityJitterSpeed;\n\t\tvarying vec3 vNormal;\t// Interpolated Normal vector passed in from vertex shader\n\n\t\t// Psuedo-random generator from https://thebookofshaders.com/10/\n\t\tfloat random(vec2 st) {\n\t\t\treturn fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n\t\t}\n\n\t\tfloat getVerticalNoise(float verticalNoiseFrameRate, float verticalNoiseSpeed, float verticalNoiseScale) {\n\t\t\tfloat v = gl_FragCoord.y / resolution.y * verticalNoiseScale;\n\t\t\tfloat theta = (v + floor(time * verticalNoiseFrameRate) * verticalNoiseSpeed);\n\t\t\tfloat verticalNoiseStrength = 1.5;\n\t\t\treturn pow(100.0, sin(theta) * sin(theta / 3.0) * sin(theta / 13.0)) / 100.0 * verticalNoiseStrength;\n\t\t}\n\n\t\tvoid main() {\n\t\t\t// Some basic Lambertian-ish reflectance.\n\t\t\tvec3 lightDirection = normalize(vec3(0.7, 0.5, 1.0));\n\t\t\tfloat diffuse = max(dot(vNormal, lightDirection), 0.0);\n\t\t\tif (smoothStepLighting)\n\t\t\t\tdiffuse = smoothstep(0.0, 1.0, diffuse);\n\t\t\tdiffuse *= lightingIntensity;\n\n\t\t\t// Use a "spikey" sine equation shifted by time for some moving glowing noise bars.\n\n\t\t\tfloat scanLineMultiplier = mix(1.0 - scanLineIntensity, 1.0, abs(sin(gl_FragCoord.y * scanLineScale * PI * 0.25)));\n\n\t\t\tfloat verticalNoise = getVerticalNoise(12.0, 2.0, 80.0) + getVerticalNoise(8.0, 1.0, 26.0);\n\n\t\t\tfloat brightness = diffuse + verticalNoise;\n\t\t\t\n\t\t\tfloat filmGrain = (2.0 * random(gl_FragCoord.xy / resolution + fract(time)) - 1.0) * filmGrainIntensity;\n\n\t\t\tvec3 fragColor = ((mix(color.xyz, vec3(0.1, 0.2, 1.0), brightness) * exposure) + filmGrain) * scanLineMultiplier;\n\n\t\t\tfloat theta = time * opacityJitterSpeed;\n\t\t\tfloat opacityJitter = (sin(theta) / 2.0 + 1.0) * opacityJitterStrength;\n\t\t\tgl_FragColor = vec4(fragColor, opacity - opacityJitter);\n\t\t}\n\t'}),P=new a.Mesh(new a.BoxGeometry(2,2,2,20,20,20),x);P.position.x=-4,w.add(P);var b=new a.Mesh(new a.SphereGeometry(1.2,22,22),x);w.add(b);var C=new a.Mesh(new a.TorusKnotGeometry(1,.34,128,16),x);C.position.x=4,w.add(C),(d=!d)?document.body.appendChild(s.dom):s.dom.remove();var I=new f.EffectComposer(v);I.setSize(window.innerWidth,window.innerHeight);var N=new c.RenderPass(w,y);I.addPass(N);var L=new u.UnrealBloomPass(new a.Vector2(window.innerWidth,window.innerHeight),.5,1,.2);I.addPass(L);var M=new g.ShaderPass(m.FXAAShader),F=v.getPixelRatio();M.material.uniforms.resolution.value.x=1/(window.innerWidth*F),M.material.uniforms.resolution.value.y=1/(window.innerHeight*F),I.addPass(M);var J=new r.GUI,R={bloom:L.enabled,"Anti-aliasing":M.enabled,Opacity:S.opacity.value},W={"Film grain":S.filmGrainIntensity.value,Jitter:S.opacityJitterStrength.value,"Jitter speed":S.opacityJitterSpeed.value,"Wiggle strength":S.wiggleStrength.value,"Wiggle period":S.wigglePeriod.value,"Wiggle duration":S.wiggleDuration.value},D=J.addFolder("Noise");D.add(W,"Film grain",0,1).onChange((function(e){x.uniforms.filmGrainIntensity.value=e})),D.add(W,"Jitter",0,1).onChange((function(e){x.uniforms.opacityJitterStrength.value=e})),D.add(W,"Jitter speed",0,100).onChange((function(e){x.uniforms.opacityJitterSpeed.value=e})),D.add(W,"Wiggle strength",0,10).onChange((function(e){S.wiggleStrength.value=e})),D.add(W,"Wiggle period",0,10).onChange((function(e){S.wigglePeriod.value=e})),D.add(W,"Wiggle duration",0,1).onChange((function(e){S.wiggleDuration.value=e})),D.open();var G={Intensity:S.lightingIntensity.value,Exposure:S.exposure.value,"Smooth step":S.smoothStepLighting.value},V=J.addFolder("Lighting");V.add(G,"Intensity",0,10).onChange((function(e){x.uniforms.lightingIntensity.value=e})),V.add(G,"Exposure",0,10).onChange((function(e){x.uniforms.exposure.value=e})),V.add(G,"Smooth step").onChange((function(e){x.uniforms.smoothStepLighting.value=e})),V.open(),J.add(R,"Opacity",0,1).onChange((function(e){x.uniforms.opacity.value=e})),J.add(R,"bloom").onChange((function(e){L.enabled=e})),J.add(R,"Anti-aliasing").onChange((function(e){M.enabled=e}));var E={Scale:S.scanLineScale.value,Intensity:S.scanLineIntensity.value},z=J.addFolder("Scanlines");z.add(E,"Scale",0,2).onChange((function(e){x.uniforms.scanLineScale.value=e})),z.add(E,"Intensity",0,1).onChange((function(e){x.uniforms.scanLineIntensity.value=e}));var A=!1;!function e(t){A=A||window.confirm("WARNING. This example may potentially trigger seizures for people with photosensitive epilepsy.");var n=t/1e3;S.inverseViewMatrix={value:y.matrixWorld},S.time.value=n,requestAnimationFrame(e),A&&I.render(w,y),s.update()}()}();
//# sourceMappingURL=hologram.cd6cc48d.js.map
