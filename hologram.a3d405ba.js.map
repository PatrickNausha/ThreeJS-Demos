{"mappings":"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","sources":["node_modules/three/examples/jsm/postprocessing/EffectComposer.js","node_modules/three/examples/jsm/shaders/CopyShader.js","node_modules/three/examples/jsm/postprocessing/ShaderPass.js","node_modules/three/examples/jsm/postprocessing/Pass.js","node_modules/three/examples/jsm/postprocessing/MaskPass.js","node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js","node_modules/three/examples/jsm/shaders/LuminosityHighPassShader.js","node_modules/three/examples/jsm/postprocessing/RenderPass.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tClock,\n\tFloat32BufferAttribute,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from '../postprocessing/ShaderPass.js';\nimport { MaskPass } from '../postprocessing/MaskPass.js';\nimport { ClearMaskPass } from '../postprocessing/MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst parameters = {\n\t\t\t\tminFilter: LinearFilter,\n\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\tformat: RGBAFormat\n\t\t\t};\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t\t}\n\n\t\tif ( ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n}\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };\n","/**\n * Full-screen textured quad shader\n */\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import { Pass } from '../postprocessing/Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tAdditiveBlending,\n\tColor,\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { LuminosityHighPassShader } from '../shaders/LuminosityHighPassShader.js';\n\n/**\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * Reference:\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nclass UnrealBloomPass extends Pass {\n\n\tconstructor( resolution, strength, radius, threshold ) {\n\n\t\tsuper();\n\n\t\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\t\tthis.radius = radius;\n\t\tthis.threshold = threshold;\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t\t// create color only once here, reuse it later inside the render function\n\t\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t\t// render targets\n\t\tconst pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\t\tthis.renderTargetsHorizontal = [];\n\t\tthis.renderTargetsVertical = [];\n\t\tthis.nMips = 5;\n\t\tlet resx = Math.round( this.resolution.x / 2 );\n\t\tlet resy = Math.round( this.resolution.y / 2 );\n\n\t\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, pars );\n\t\tthis.renderTargetBright.texture.name = 'UnrealBloomPass.bright';\n\t\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tconst renderTargetHorizonal = new WebGLRenderTarget( resx, resy, pars );\n\n\t\t\trenderTargetHorizonal.texture.name = 'UnrealBloomPass.h' + i;\n\t\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\t\tconst renderTargetVertical = new WebGLRenderTarget( resx, resy, pars );\n\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// luminosity high pass material\n\n\t\tif ( LuminosityHighPassShader === undefined )\n\t\t\tconsole.error( 'THREE.UnrealBloomPass relies on LuminosityHighPassShader' );\n\n\t\tconst highPassShader = LuminosityHighPassShader;\n\t\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = threshold;\n\t\tthis.highPassUniforms[ 'smoothWidth' ].value = 0.01;\n\n\t\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\t\tuniforms: this.highPassUniforms,\n\t\t\tvertexShader: highPassShader.vertexShader,\n\t\t\tfragmentShader: highPassShader.fragmentShader,\n\t\t\tdefines: {}\n\t\t} );\n\n\t\t// Gaussian Blur Materials\n\t\tthis.separableBlurMaterials = [];\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\t\tresx = Math.round( this.resolution.x / 2 );\n\t\tresy = Math.round( this.resolution.y / 2 );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'texSize' ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// Composite material\n\t\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture1' ].value = this.renderTargetsVertical[ 0 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture2' ].value = this.renderTargetsVertical[ 1 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture3' ].value = this.renderTargetsVertical[ 2 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture4' ].value = this.renderTargetsVertical[ 3 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture5' ].value = this.renderTargetsVertical[ 4 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1;\n\t\tthis.compositeMaterial.needsUpdate = true;\n\n\t\tconst bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors;\n\t\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\t// copy material\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.UnrealBloomPass relies on CopyShader' );\n\n\t\t}\n\n\t\tconst copyShader = CopyShader;\n\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\t\tthis.copyUniforms[ 'opacity' ].value = 1.0;\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis._oldClearColor = new Color();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis.basic = new MeshBasicMaterial();\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tlet resx = Math.round( width / 2 );\n\t\tlet resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'texSize' ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tlet inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\tgetSeperableBlurMaterial( kernelRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_RADIUS': kernelRadius,\n\t\t\t\t'SIGMA': kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\tgetCompositeMaterial( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'NUM_MIPS': nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'blurTexture1': { value: null },\n\t\t\t\t'blurTexture2': { value: null },\n\t\t\t\t'blurTexture3': { value: null },\n\t\t\t\t'blurTexture4': { value: null },\n\t\t\t\t'blurTexture5': { value: null },\n\t\t\t\t'dirtTexture': { value: null },\n\t\t\t\t'bloomStrength': { value: 1.0 },\n\t\t\t\t'bloomFactors': { value: null },\n\t\t\t\t'bloomTintColors': { value: null },\n\t\t\t\t'bloomRadius': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform sampler2D dirtTexture;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n}\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n","import {\n\tColor\n} from 'three';\n\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nconst LuminosityHighPassShader = {\n\n\tshaderID: 'luminosityHighPass',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'luminosityThreshold': { value: 1.0 },\n\t\t'smoothWidth': { value: 1.0 },\n\t\t'defaultColor': { value: new Color( 0x000000 ) },\n\t\t'defaultOpacity': { value: 0.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec3 defaultColor;\n\t\tuniform float defaultOpacity;\n\t\tuniform float luminosityThreshold;\n\t\tuniform float smoothWidth;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n\t\t\tfloat v = dot( texel.xyz, luma );\n\n\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\n\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\n\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\n\n\t\t}`\n\n};\n\nexport { LuminosityHighPassShader };\n","import {\n\tColor\n} from 'three';\nimport { Pass } from '../postprocessing/Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n"],"names":["$8TSCy","parcelRequire","$666025b2fd847a1f$export$7fe01e6ab8aa748c","renderer","renderTarget","this","undefined","parameters","minFilter","$6OvZu","LinearFilter","magFilter","format","RGBAFormat","size","getSize","Vector2","_pixelRatio","getPixelRatio","_width","width","_height","height","WebGLRenderTarget","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","passes","$2wkXx","CopyShader","console","error","$gy7bn","ShaderPass","copyPass","clock","Clock","key","value","tmp","pass","push","setSize","index","splice","indexOf","passIndex","i","length","enabled","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","isLastEnabledPass","render","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","swapBuffers","$im5gf","MaskPass","ClearMaskPass","setRenderTarget","dispose","effectiveWidth","effectiveHeight","pixelRatio","$666025b2fd847a1f$var$_geometry","OrthographicCamera","BufferGeometry","setAttribute","Float32BufferAttribute","$1d5ed4039cd88450$export$57f84a24a9a6130d","uniforms","tDiffuse","opacity","vertexShader","fragmentShader","$c0c564a2ac95bcdc$export$c55093fd4f9e42f0","Pass","shader","textureID","ShaderMaterial","_this","material","UniformsUtils","defines","Object","assign","fsQuad","$MIC3f","FullScreenQuad","clear","autoClearColor","autoClearDepth","autoClearStencil","$092716f80203f221$export$802bc10488da99c7","$092716f80203f221$var$_camera","$092716f80203f221$var$_geometry","$092716f80203f221$export$3983474c8e6e978b","_mesh","Mesh","geometry","get","set","$d5ce5cd3f9e337b1$export$bb424a4005d6dde0","scene","camera","inverse","writeValue","clearValue","color","setMask","depth","setLocked","setTest","setOp","REPLACE","ALWAYS","setClear","KEEP","$d5ce5cd3f9e337b1$export$8d8650aed29c6251","$5f35d15544f4e7ae$export$d4d608c865617544","resolution","strength","radius","threshold","x","y","clearColor","Color","pars","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","generateMipmaps","renderTargetHorizonal","renderTargetVertical","$d7LYa","LuminosityHighPassShader","highPassShader","highPassUniforms","materialHighPassFilter","separableBlurMaterials","kernelSizeArray","i1","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomTintColors","Vector3","copyShader","copyUniforms","materialCopy","blending","AdditiveBlending","depthTest","depthWrite","transparent","_oldClearColor","oldClearAlpha","basic","MeshBasicMaterial","i2","getClearColor","getClearAlpha","oldAutoClear","autoClear","setClearColor","map","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomRadius","$98e1238da1fefc22$export$30029d01c9072e8b","shaderID","luminosityThreshold","smoothWidth","defaultColor","defaultOpacity","$62f95850d7531858$export$f63ea822f020b5b0","overrideMaterial","clearAlpha","clearDepth","oldOverrideMaterial"],"version":3,"file":"hologram.a3d405ba.js.map"}